grammar org.eclipse.scout.saml.Saml  with org.eclipse.xtext.xbase.Xbase

generate saml "http://www.eclipse.org/scout/saml/Saml"

import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

//TODO: file splitting?
//TODO: unique constraints (scope)?
//TODO: conditional properties?

//TODO: plain java code in XBlockExpression?
//TODO: creating saml files API?
//TODO: templates


Model:
	module=ModuleElement
	(imports+=ImportElement)*
	(
		(codes+=JavaCodeElement)
		|
		(translations+=TranslationElement)
		|
		(codes+=CodeElement)
		|
		(lookups+=LookupElement)
		|
		(forms+=FormElement)
	)*;

QualifiedNameWithWildCard: QualifiedName  ('.' '*')?;
enum BooleanType:true|false;

ModuleElement: 'module' name=QualifiedName;

ImportElement: 'import' importedNamespace=QualifiedNameWithWildCard;




JavaCodeElement:'java_code' name=ID 'runat' '=' runat=RunAtType source=XBlockExpression;
enum RunAtType:client|server;

LogicElement:'logic' (('event' '=' event=LogicType) & ('runat' '=' runat=RunAtType)? & ('exec' '=' exec=[JavaCodeElement])?) (source=XBlockExpression)?;
enum LogicType:global|all|modify_load|modify_store|new_load|new_store|changed|click|master_changed|init;




CodeElement:'code' name=ID 'id' '=' id=INT;

TranslationElement:'translation' name=QualifiedName (translations+=LanguageAttribute)+;
LanguageAttribute:lang=ID '=' text=STRING;

LookupElement:'lookup' name=ID '{' (logic+=LogicElement |  javacode+=JavaCodeElement)* '}';

FormElement:'form' name=ID (('modal' '=' modal=BooleanType)? & ('columns' '=' columns=INT)?) ('{' (logic+=LogicElement | fields+=AbstractFieldElement )* '}')?;

AbstractFieldElement: /*AbstractValueFieldElement | */AbstractContainerFieldElement;
AbstractFieldRule: {AbstractFieldRule} 
	(('text' '='text=[TranslationElement])? & ('enabled' '=' enabled=BooleanType)? & ('visible' '=' visible=BooleanType)? /*& ('master' '=' master=[AbstractValueFieldElement])? */);

AbstractContainerFieldElement: SequenceBoxElement;
AbstractContainerFieldRule: {AbstractContainerFieldRule} 
	fieldRule=AbstractFieldRule ('{' (logic+=LogicElement | fields+=AbstractFieldElement)* '}')?;
	/*
AbstractValueFieldElement:StringElement|SmartfieldElement|LongElement|DoubleElement|DateElement;
AbstractValueFieldRule: {AbstractValueFieldRule} 
	(fieldRule=AbstractFieldRule & ('mandatory' '=' mandatory=BooleanType)?)
	('{' logic+=LogicElement* '}')?;
*/
SequenceBoxElement:'sequence_box' name=ID rule=AbstractContainerFieldRule;
/*
StringElement:'string' name=ID (rule=AbstractValueFieldRule & ('maxlen' '=' maxlen=INT)?);

DoubleElement:'double' name=ID rule=AbstractValueFieldRule;

LongElement:'long' name=ID rule=AbstractValueFieldRule;

DateElement:'date' name=ID rule=AbstractValueFieldRule;

SmartfieldElement:'smartfield' name=ID
	(rule=AbstractValueFieldRule & ('code' '=' code=[CodeElement])? & ('value_type' '=' valueType=[jvmTypes::JvmType])? & ('lookup' '=' lookup=[LookupElement])?);
 */