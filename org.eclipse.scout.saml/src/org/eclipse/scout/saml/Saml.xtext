grammar org.eclipse.scout.saml.Saml  with org.eclipse.xtext.xbase.Xbase

generate saml "http://www.eclipse.org/scout/saml/Saml"

import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase

Model:
	module=ModuleElement
	(imports+=ImportElement)*
	(
		(translations+=TranslationElement)
		|
		(codes+=CodeElement)
		|
		(lookups+=LookupElement)
		|
		(templates+=TemplateElement)
		|
		(forms+=FormElement)
	)*;


// TYPES
QualifiedNameWithWildCard: QualifiedName  ('.' '*')?;
BooleanType: 'true'|'false';	//TODO: code completion
LogicEventType: 'all'|'modify_load'|'modify_store'|'new_load'|'new_store'|'changed'|'click'|'master_changed'|'init';	//TODO: code completion depending on element we are on


ModuleElement: 'module' name=QualifiedName;


ImportElement: 'import' importedNamespace=QualifiedNameWithWildCard;


TranslationElement:'translation' name=QualifiedName (translations+=LanguageAttribute)+;
LanguageAttribute:lang=ID '=' text=STRING;


//TODO: validation of properties, scope of exec=
LogicElement: {LogicElement} 'logic' (name=ID)? (('event' '=' event=LogicEventType)? & ('runat' '=' runat=('client'|'server'))? & ('exec' '=' exec=[LogicElement])?) ('{'source=STRING/*XBlockExpression*/'}')?;


CodeElement:'code' name=ID 'id' '=' id=INT;


LookupElement:'lookup' name=ID '{' logic+=LogicElement* '}';


TemplateElement:'template' name=ID 'definition' '=' definition=STRING/*JvmTypeReference*/;



FormElement:'form' name=ID (('modal' '=' modal=BooleanType)? & ('columns' '=' columns=INT)? & ('text' '=' text=[TranslationElement])?) 
	('{' (logic+=LogicElement | fields+=FormFieldElement)* '}')?;


// UI FIELDS
FormFieldElement:CompositeFieldElement | ValueFieldElement | CustomFieldElement;

// COMPOSITES
CompositeFieldElement:SequenceBoxElement|GroupBoxElement;
SequenceBoxElement:'sequence_box' name=ID
	(
		('text' '=' text=[TranslationElement])? & 
		('enabled' '=' enabled=BooleanType)? &
		('visible' '=' visible=BooleanType)? &
		('master' '=' master=[FormFieldElement])?
	)
	('{' (logic+=LogicElement | fields+=FormFieldElement)* '}')?;
	
GroupBoxElement:'group_box' name=ID
	(
		('text' '=' text=[TranslationElement])? &
		('columns' '=' columns=INT)? &
		('enabled' '=' enabled=BooleanType)? &
		('visible' '=' visible=BooleanType)? &
		('master' '=' master=[FormFieldElement])?
	)
	('{' (logic+=LogicElement | fields+=FormFieldElement)* '}')?;


// VALUE FIELDS
ValueFieldElement: StringElement|DoubleElement|LongElement|DateElement|SmartfieldElement;

StringElement:'string' name=ID 
	(
		('text' '=' text=[TranslationElement])? &
		('enabled' '=' enabled=BooleanType)? &
		('visible' '=' visible=BooleanType)? &
		('master' '=' master=[FormFieldElement])? &
		('mandatory' '=' mandatory=BooleanType)? &
		('maxlen' '=' maxlen=INT)?
	)
	('{' logic+=LogicElement* '}')?;


DoubleElement:'double' name=ID 
	(
		('text' '=' text=[TranslationElement])? &
		('enabled' '=' enabled=BooleanType)? &
		('visible' '=' visible=BooleanType)? &
		('master' '=' master=[FormFieldElement])? &
		('mandatory' '=' mandatory=BooleanType)?
	)
	('{' logic+=LogicElement* '}')?;

LongElement:'long' name=ID
	(
		('text' '=' text=[TranslationElement])? &
		('enabled' '=' enabled=BooleanType)? &
		('visible' '=' visible=BooleanType)? &
		('master' '=' master=[FormFieldElement])? &
		('mandatory' '=' mandatory=BooleanType)?
	)
	('{' logic+=LogicElement* '}')?;

DateElement:'date' name=ID
	(
		('text' '=' text=[TranslationElement])? &
		('enabled' '=' enabled=BooleanType)? &
		('visible' '=' visible=BooleanType)? &
		('master' '=' master=[FormFieldElement])? &
		('mandatory' '=' mandatory=BooleanType)?
	)
	('{' logic+=LogicElement* '}')?;

SmartfieldElement:'smartfield' name=ID
	(
		('text' '=' text=[TranslationElement])? &
		('enabled' '=' enabled=BooleanType)? &
		('visible' '=' visible=BooleanType)? &
		('master' '=' master=[FormFieldElement])? &
		('mandatory' '=' mandatory=BooleanType)? &
		('code' '=' code=[CodeElement])? &
		('value_type' '=' valueType=STRING/*JvmTypeReference*/)? &
		('lookup' '=' lookup=[LookupElement])?
	)
	('{' logic+=LogicElement* '}')?;

// CUSTOM FIELDS
CustomFieldElement:'custom_field' name=ID 
	'template' '=' template=[TemplateElement]
	(
		('text' '=' text=[TranslationElement])? &
		('enabled' '=' enabled=BooleanType)? &
		('visible' '=' visible=BooleanType)? &
		('master' '=' master=[FormFieldElement])?
	)
	('{' (logic+=LogicElement | fields+=FormFieldElement)* '}')?;



/*
XBlockExpression returns xbase::XBlockExpression: 
	{XBlockExpression}
	'{'
		(expressions+=XExpressionInsideBlock ';')*
	'}';

XExpressionInsideBlock returns xbase::XExpression:
	=>XVariableDeclaration | XExpression;

XVariableDeclaration returns xbase::XVariableDeclaration:
	{XVariableDeclaration}
	type=JvmTypeReference name=ValidID ('=' right=XExpression)?;

XLiteral returns xbase::XExpression:
	XBooleanLiteral |
	XNumberLiteral |
	XNullLiteral |
	XStringLiteral |
	XTypeLiteral
;

//
// TODO: this makes code completion freeze for feauture access
XTypeLiteral returns xbase::XExpression :
	{xbase::XTypeLiteral} type=[types::JvmType|QualifiedName] '.' 'class'
;

XUnaryOperation returns xbase::XExpression:
	{xbase::XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XMemberFeatureCall
	| XMemberFeatureCall;

XPrimaryExpression returns xbase::XExpression:
	XConstructorCall |
	XFeatureCall |
	XLiteral |
	XIfExpression |
	XForLoopExpression |
	XWhileExpression |
	XDoWhileExpression |
	XThrowExpression |
	XReturnExpression |
	XTryCatchFinallyExpression |
//	=>XCastedExpression |
	XParenthesizedExpression;


//XCastedExpression returns xbase::XExpression :
//	{xbase::XCastedExpression} 
//	'(' type=JvmTypeReference ')' target=XMemberFeatureCall
//;

XMemberFeatureCall returns xbase::XExpression:
	XPrimaryExpression
	(=>({xbase::XAssignment.assignable=current} '.' feature=[types::JvmIdentifiableElement|ValidID] OpSingleAssign) value=XAssignment
	|=>({xbase::XMemberFeatureCall.memberCallTarget=current} ".") 
		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
		feature=[types::JvmIdentifiableElement|ValidID] (
			=>explicitOperationCall?='(' 
				(
				    memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
				)? 
			')')?
		)*;

XFeatureCall returns xbase::XExpression:
	{xbase::XFeatureCall}
	(declaringType=[types::JvmDeclaredType|StaticQualifier])?
	('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? 
	feature=[types::JvmIdentifiableElement|IdOrSuper] 
	(=>explicitOperationCall?='(' 
		(
		    featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
		)? 
	')')?;

//
// String[] a = new String[3];
// String[] b = new String[]{"", "", ""};
XConstructorCall returns xbase::XConstructorCall:
	{XConstructorCall}
	'new' constructor=[types::JvmConstructor|QualifiedName] 
	(=>'<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	
	(
		(=>'(' 
			(
			    arguments+=XExpression (',' arguments+=XExpression)*
			)? 
		')')
	|
		(=>isArray?='[' ']')
	)
	;
 */
