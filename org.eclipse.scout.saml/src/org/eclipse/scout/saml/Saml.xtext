grammar org.eclipse.scout.saml.Saml  with org.eclipse.xtext.xbase.Xbase

generate saml "http://www.eclipse.org/scout/saml/Saml"

import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase

Model:
	module=ModuleElement
	(imports+=ImportElement)*
	(
		(translations+=TranslationElement)
		|
		(codes+=CodeElement)
		|
		(lookups+=LookupElement)
		|
		(templates+=TemplateElement)
		|
		(forms+=FormElement)
	)*;


// TYPES
QualifiedNameWithWildCard: QualifiedName  ('.' '*')?;
BooleanType: 'true'|'false';	//TODO: code completion
LogicEventType: 'all'|'modify_load'|'modify_store'|'new_load'|'new_store'|'changed'|'click'|'master_changed'|'init';	//TODO: code completion depending on element we are on


ModuleElement: 'module' name=QualifiedName;


ImportElement: 'import' importedNamespace=QualifiedNameWithWildCard;


TranslationElement:'translation' name=QualifiedName (translations+=LanguageAttribute)+;
LanguageAttribute:lang=ID '=' text=STRING;


//TODO: validation of properties, scope of exec=
LogicElement: {LogicElement} 'logic' (name=ID)? (('event' '=' event=LogicEventType)? & ('runat' '=' runat=('client'|'server'))? & ('exec' '=' exec=[LogicElement])?) (source=XBlockExpression)?;


CodeElement:'code' name=ID 'id' '=' id=INT;


LookupElement:'lookup' name=ID '{' logic+=LogicElement* '}';


TemplateElement:'template' name=ID 'definition' '=' definition=JvmTypeReference;



FormElement:'form' name=ID (('modal' '=' modal=BooleanType)? & ('columns' '=' columns=INT)? & ('text' '=' text=[TranslationElement])?) 
	('{' (logic+=LogicElement | fields+=FormFieldElement)* '}')?;


// UI FIELDS
FormFieldElement:CompositeFieldElement | ValueFieldElement;
FormFieldProperties: {FormFieldProperties}
	(('text' '=' text=[TranslationElement])? & ('enabled' '=' enabled=BooleanType)? & ('visible' '=' visible=BooleanType)? & ('master' '=' master=[ValueFieldElement])?);


// COMPOSITES
CompositeFieldElement:SequenceBoxElement|GroupBoxElement;
SequenceBoxElement:'sequence_box'name=ID formFieldProperties=FormFieldProperties
	('{' (logic+=LogicElement | fields+=FormFieldElement)* '}')?;
	
GroupBoxElement:'group_box'name=ID formFieldProperties=FormFieldProperties
	('{' (logic+=LogicElement | fields+=FormFieldElement)* '}')?;


// VALUE FIELDS
ValueFieldElement: StringElement|DoubleElement|LongElement|DateElement|SmartfieldElement|CustomFieldElement;
ValueFieldProperties: {ValueFieldProperties}
	(formFieldProperties=FormFieldProperties  & ('mandatory' '=' mandatory=BooleanType)?);

StringElement:'string' name=ID (valueFieldProperties=ValueFieldProperties & ('maxlen' '=' maxlen=INT)?)
	('{' logic+=LogicElement* '}')?;

DoubleElement:'double' name=ID (valueFieldProperties=ValueFieldProperties)
	('{' logic+=LogicElement* '}')?;

LongElement:'long' name=ID (valueFieldProperties=ValueFieldProperties)
	('{' logic+=LogicElement* '}')?;

DateElement:'date' name=ID (valueFieldProperties=ValueFieldProperties)
	('{' logic+=LogicElement* '}')?;

SmartfieldElement:'smartfield' name=ID ((valueFieldProperties=ValueFieldProperties)? & ('code' '=' code=[CodeElement])? & ('value_type' '=' valueType=JvmTypeReference)? & ('lookup' '=' lookup=[LookupElement])?)
	('{' logic+=LogicElement* '}')?;

// CUSTOM FIELDS
CustomFieldElement:'custom_field' name=ID 'template' '=' template=[TemplateElement] formFieldProperties=FormFieldProperties
	('{' (logic+=LogicElement | fields+=FormFieldElement)* '}')?;

//XLiteral returns xbase::XExpression:
//	XBooleanLiteral |
//	XNumberLiteral |
//	XNullLiteral |
//	XStringLiteral |
//	XTypeLiteral
//;
//
//XTypeLiteral returns xbase::XTypeLiteral :
//	{XTypeLiteral} type=[types::JvmType|QualifiedName] '.' 'class'
//;

//XCastedExpression returns xbase::XCastedExpression :
//	{XCastedExpression}
//	'(' type=JvmTypeReference ')' target=XMemberFeatureCall 
//;


//XMemberFeatureCall returns xbase::XMemberFeatureCall:
//	XPrimaryExpression
//	(=>({XAssignment.assignable=current} '.' feature=[types::JvmIdentifiableElement|ValidID] OpSingleAssign) value=XAssignment
//	|=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|spreading?="*.")) 
//		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
//		feature=[types::JvmIdentifiableElement|ValidID] (
//			=>explicitOperationCall?='(' 
//				(
//				    memberCallArguments+=XShortClosure
//				  |	memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
//				)? 
//			')')?
//			memberCallArguments+=XClosure?
//		)*;