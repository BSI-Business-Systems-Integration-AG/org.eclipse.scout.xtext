grammar org.eclipse.scout.saml.Saml  with org.eclipse.xtext.xbase.Xbase

generate saml "http://www.eclipse.org/scout/saml/Saml"

import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase

//=====================================================================================================================


//TODO: plain java code in XBlockExpression?


Model:
	module=ModuleElement
	(imports+=ImportElement)*
	(
		(codes+=JavaCodeElement)
		|
		(translations+=TranslationElement)
		|
		(codes+=CodeElement)
		|
		(lookups+=LookupElement)
		|
		(forms+=FormElement)
	)*;

QualifiedNameWithWildCard: QualifiedName  ('.' '*')?;
enum BooleanType:true|false;

ModuleElement: 'module' name=QualifiedName;

ImportElement: 'import' importedNamespace=QualifiedNameWithWildCard;




JavaCodeElement:'java_code' name=ID 'runat' '=' runat=RunAtType source=XBlockExpression;
RunAtType:'client'|'server';

LogicElement:'logic' (('event' '=' event=LogicType) & ('runat' '=' runat=RunAtType)? & ('exec' '=' exec=[JavaCodeElement])?) (source=XBlockExpression)?;
enum LogicType:global|all|modify_load|modify_store|new_load|new_store|changed|click|master_changed|init;








CodeElement:'code' name=ID 'id' '=' id=INT;

TranslationElement:'translation' name=QualifiedName (translations+=LanguageAttribute)+;
LanguageAttribute:lang=ID '=' text=STRING;

LookupElement:'lookup' name=ID '{' (logic+=LogicElement |  javacode+=JavaCodeElement)* '}';

FormElement:'form' name=ID (('modal' '=' modal=BooleanType)? & ('columns' '=' columns=INT)?) 
	('{' (logic+=LogicElement | fields+=ControlElement )* '}')?
;

ControlElement:CompositeElement | LeafElement;
ControlElementRule: {ControlElementRule}
	(('text' '='text=[TranslationElement])? & ('enabled' '=' enabled=BooleanType)? & ('visible' '=' visible=BooleanType)?);

CompositeElement:SequenceBoxElement;
CompositeElementRule:rule=ControlElementRule 
	'{'  (logic+=LogicElement | childre+=ControlElement)* '}';

LeafElement:StringElement|DoubleElement|LongElement;

StringElement:'string' name=ID (fieldRule=ControlElementRule & ('mandatory' '=' mandatory=BooleanType)? & ('master' '='master=[LeafElement])?)
	('{' logic+=LogicElement* '}')?;

DoubleElement:'double' name=ID (fieldRule=ControlElementRule & ('mandatory' '=' mandatory=BooleanType)?)
	('{' logic+=LogicElement* '}')?;

LongElement:'long' name=ID (fieldRule=ControlElementRule & ('mandatory' '=' mandatory=BooleanType)?)
	('{' logic+=LogicElement* '}')?;

SequenceBoxElement:'sequence_box'name=ID fieldRule=CompositeElementRule;

XBlockExpression returns xbase::XBlockExpression: 
	{XBlockExpression}
	'{'
		(expressions+=XExpressionInsideBlock ';')*
	'}';

XExpressionInsideBlock returns xbase::XExpression:
	=>XVariableDeclaration | XExpression;

XVariableDeclaration returns xbase::XVariableDeclaration:
	{XVariableDeclaration}
	type=JvmTypeReference name=ValidID ('=' right=XExpression)?;

XLiteral returns xbase::XExpression:
	XBooleanLiteral |
	XNumberLiteral |
	XNullLiteral |
	XStringLiteral |
	XTypeLiteral
;

//
// TODO: this makes code completion freeze for feauture access
//XTypeLiteral returns xbase::XTypeLiteral :
//	{XTypeLiteral} type=[types::JvmType|QualifiedName] '.' 'class'
//;

//XUnaryOperation returns xbase::XExpression:
//	{xbase::XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XMemberFeatureCall
//	| XMemberFeatureCall;

//XPrimaryExpression returns xbase::XExpression:
//	XConstructorCall |
//	XFeatureCall |
//	XLiteral |
//	XIfExpression |
//	XForLoopExpression |
//	XWhileExpression |
//	XDoWhileExpression |
//	XThrowExpression |
//	XReturnExpression |
//	XTryCatchFinallyExpression |
////	=>XCastedExpression |
//	XParenthesizedExpression;


//XCastedExpression returns xbase::XExpression :
//	{xbase::XCastedExpression} 
//	'(' type=JvmTypeReference ')' target=XMemberFeatureCall
//;

//XMemberFeatureCall returns xbase::XExpression:
//	XPrimaryExpression
//	(=>({xbase::XAssignment.assignable=current} '.' feature=[types::JvmIdentifiableElement|ValidID] OpSingleAssign) value=XAssignment
//	|=>({xbase::XMemberFeatureCall.memberCallTarget=current} ".") 
//		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
//		feature=[types::JvmIdentifiableElement|ValidID] (
//			=>explicitOperationCall?='(' 
//				(
//				    memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
//				)? 
//			')')?
//		)*;

//XFeatureCall returns xbase::XExpression:
//	{xbase::XFeatureCall}
//	(declaringType=[types::JvmDeclaredType|StaticQualifier])?
//	('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? 
//	feature=[types::JvmIdentifiableElement|IdOrSuper] 
//	(=>explicitOperationCall?='(' 
//		(
//		    featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
//		)? 
//	')')?;