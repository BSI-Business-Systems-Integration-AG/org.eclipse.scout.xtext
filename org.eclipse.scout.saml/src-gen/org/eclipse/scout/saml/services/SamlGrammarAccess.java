/*
* generated by Xtext
*/

package org.eclipse.scout.saml.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class SamlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModuleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModuleModuleElementParserRuleCall_0_0 = (RuleCall)cModuleAssignment_0.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportElementParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTranslationsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTranslationsTranslationElementParserRuleCall_2_0_0 = (RuleCall)cTranslationsAssignment_2_0.eContents().get(0);
		private final Assignment cCodesAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cCodesCodeElementParserRuleCall_2_1_0 = (RuleCall)cCodesAssignment_2_1.eContents().get(0);
		private final Assignment cLookupsAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cLookupsLookupElementParserRuleCall_2_2_0 = (RuleCall)cLookupsAssignment_2_2.eContents().get(0);
		private final Assignment cTemplatesAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cTemplatesTemplateElementParserRuleCall_2_3_0 = (RuleCall)cTemplatesAssignment_2_3.eContents().get(0);
		private final Assignment cFormsAssignment_2_4 = (Assignment)cAlternatives_2.eContents().get(4);
		private final RuleCall cFormsFormElementParserRuleCall_2_4_0 = (RuleCall)cFormsAssignment_2_4.eContents().get(0);
		
		//Model:
		//
		//	module=ModuleElement imports+=ImportElement* (translations+=TranslationElement | codes+=CodeElement |
		//
		//	lookups+=LookupElement | templates+=TemplateElement | forms+=FormElement)*;
		public ParserRule getRule() { return rule; }

		//module=ModuleElement imports+=ImportElement* (translations+=TranslationElement | codes+=CodeElement |
		//
		//lookups+=LookupElement | templates+=TemplateElement | forms+=FormElement)*
		public Group getGroup() { return cGroup; }

		//module=ModuleElement
		public Assignment getModuleAssignment_0() { return cModuleAssignment_0; }

		//ModuleElement
		public RuleCall getModuleModuleElementParserRuleCall_0_0() { return cModuleModuleElementParserRuleCall_0_0; }

		//imports+=ImportElement*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//ImportElement
		public RuleCall getImportsImportElementParserRuleCall_1_0() { return cImportsImportElementParserRuleCall_1_0; }

		//(translations+=TranslationElement | codes+=CodeElement | lookups+=LookupElement | templates+=TemplateElement |
		//
		//forms+=FormElement)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//translations+=TranslationElement
		public Assignment getTranslationsAssignment_2_0() { return cTranslationsAssignment_2_0; }

		//TranslationElement
		public RuleCall getTranslationsTranslationElementParserRuleCall_2_0_0() { return cTranslationsTranslationElementParserRuleCall_2_0_0; }

		//codes+=CodeElement
		public Assignment getCodesAssignment_2_1() { return cCodesAssignment_2_1; }

		//CodeElement
		public RuleCall getCodesCodeElementParserRuleCall_2_1_0() { return cCodesCodeElementParserRuleCall_2_1_0; }

		//lookups+=LookupElement
		public Assignment getLookupsAssignment_2_2() { return cLookupsAssignment_2_2; }

		//LookupElement
		public RuleCall getLookupsLookupElementParserRuleCall_2_2_0() { return cLookupsLookupElementParserRuleCall_2_2_0; }

		//templates+=TemplateElement
		public Assignment getTemplatesAssignment_2_3() { return cTemplatesAssignment_2_3; }

		//TemplateElement
		public RuleCall getTemplatesTemplateElementParserRuleCall_2_3_0() { return cTemplatesTemplateElementParserRuleCall_2_3_0; }

		//forms+=FormElement
		public Assignment getFormsAssignment_2_4() { return cFormsAssignment_2_4; }

		//FormElement
		public RuleCall getFormsFormElementParserRuleCall_2_4_0() { return cFormsFormElementParserRuleCall_2_4_0; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//// TYPES
		// QualifiedNameWithWildCard:
		//
		//	QualifiedName ("." "*")?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		////TODO: code completion
		// BooleanType:
		//
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class LogicEventTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicEventType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAllKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cModify_loadKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cModify_storeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNew_loadKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cNew_storeKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cChangedKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cClickKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cMaster_changedKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cInitKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		////TODO: code completion depending on element we are on
		// LogicEventType:
		//
		//	"all" | "modify_load" | "modify_store" | "new_load" | "new_store" | "changed" | "click" | "master_changed" | "init";
		public ParserRule getRule() { return rule; }

		//"all" | "modify_load" | "modify_store" | "new_load" | "new_store" | "changed" | "click" | "master_changed" | "init"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"all"
		public Keyword getAllKeyword_0() { return cAllKeyword_0; }

		//"modify_load"
		public Keyword getModify_loadKeyword_1() { return cModify_loadKeyword_1; }

		//"modify_store"
		public Keyword getModify_storeKeyword_2() { return cModify_storeKeyword_2; }

		//"new_load"
		public Keyword getNew_loadKeyword_3() { return cNew_loadKeyword_3; }

		//"new_store"
		public Keyword getNew_storeKeyword_4() { return cNew_storeKeyword_4; }

		//"changed"
		public Keyword getChangedKeyword_5() { return cChangedKeyword_5; }

		//"click"
		public Keyword getClickKeyword_6() { return cClickKeyword_6; }

		//"master_changed"
		public Keyword getMaster_changedKeyword_7() { return cMaster_changedKeyword_7; }

		//"init"
		public Keyword getInitKeyword_8() { return cInitKeyword_8; }
	}

	public class ModuleElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ModuleElement:
		//
		//	"module" name=QualifiedName;
		public ParserRule getRule() { return rule; }

		//"module" name=QualifiedName
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}

	public class ImportElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//ImportElement:
		//
		//	"import" importedNamespace=QualifiedNameWithWildCard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildCard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0; }
	}

	public class TranslationElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TranslationElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTranslationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTranslationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTranslationsLanguageAttributeParserRuleCall_2_0 = (RuleCall)cTranslationsAssignment_2.eContents().get(0);
		
		//TranslationElement:
		//
		//	"translation" name=QualifiedName translations+=LanguageAttribute+;
		public ParserRule getRule() { return rule; }

		//"translation" name=QualifiedName translations+=LanguageAttribute+
		public Group getGroup() { return cGroup; }

		//"translation"
		public Keyword getTranslationKeyword_0() { return cTranslationKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//translations+=LanguageAttribute+
		public Assignment getTranslationsAssignment_2() { return cTranslationsAssignment_2; }

		//LanguageAttribute
		public RuleCall getTranslationsLanguageAttributeParserRuleCall_2_0() { return cTranslationsLanguageAttributeParserRuleCall_2_0; }
	}

	public class LanguageAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LanguageAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLangAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLangIDTerminalRuleCall_0_0 = (RuleCall)cLangAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		
		//LanguageAttribute:
		//
		//	lang=ID "=" text=STRING;
		public ParserRule getRule() { return rule; }

		//lang=ID "=" text=STRING
		public Group getGroup() { return cGroup; }

		//lang=ID
		public Assignment getLangAssignment_0() { return cLangAssignment_0; }

		//ID
		public RuleCall getLangIDTerminalRuleCall_0_0() { return cLangIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//text=STRING
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_0() { return cTextSTRINGTerminalRuleCall_2_0; }
	}

	public class LogicElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogicElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLogicKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cEventKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cEventAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cEventLogicEventTypeParserRuleCall_3_0_2_0 = (RuleCall)cEventAssignment_3_0_2.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cRunatKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cRunatAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final Alternatives cRunatAlternatives_3_1_2_0 = (Alternatives)cRunatAssignment_3_1_2.eContents().get(0);
		private final Keyword cRunatClientKeyword_3_1_2_0_0 = (Keyword)cRunatAlternatives_3_1_2_0.eContents().get(0);
		private final Keyword cRunatServerKeyword_3_1_2_0_1 = (Keyword)cRunatAlternatives_3_1_2_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cExecKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Assignment cExecAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final CrossReference cExecLogicElementCrossReference_3_2_2_0 = (CrossReference)cExecAssignment_3_2_2.eContents().get(0);
		private final RuleCall cExecLogicElementIDTerminalRuleCall_3_2_2_0_1 = (RuleCall)cExecLogicElementCrossReference_3_2_2_0.eContents().get(1);
		private final Assignment cSourceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSourceXBlockExpressionParserRuleCall_4_0 = (RuleCall)cSourceAssignment_4.eContents().get(0);
		
		////TODO: validation of properties, scope of exec=
		// LogicElement:
		//
		//	{LogicElement} "logic" name=ID? (("event" "=" event=LogicEventType)? & ("runat" "=" runat=("client" | "server"))? &
		//
		//	("exec" "=" exec=[LogicElement])?) source=XBlockExpression?;
		public ParserRule getRule() { return rule; }

		//{LogicElement} "logic" name=ID? (("event" "=" event=LogicEventType)? & ("runat" "=" runat=("client" | "server"))? &
		//
		//("exec" "=" exec=[LogicElement])?) source=XBlockExpression?
		public Group getGroup() { return cGroup; }

		//{LogicElement}
		public Action getLogicElementAction_0() { return cLogicElementAction_0; }

		//"logic"
		public Keyword getLogicKeyword_1() { return cLogicKeyword_1; }

		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("event" "=" event=LogicEventType)? & ("runat" "=" runat=("client" | "server"))? & ("exec" "=" exec=[LogicElement])?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//("event" "=" event=LogicEventType)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"event"
		public Keyword getEventKeyword_3_0_0() { return cEventKeyword_3_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_3_0_1() { return cEqualsSignKeyword_3_0_1; }

		//event=LogicEventType
		public Assignment getEventAssignment_3_0_2() { return cEventAssignment_3_0_2; }

		//LogicEventType
		public RuleCall getEventLogicEventTypeParserRuleCall_3_0_2_0() { return cEventLogicEventTypeParserRuleCall_3_0_2_0; }

		//("runat" "=" runat=("client" | "server"))?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"runat"
		public Keyword getRunatKeyword_3_1_0() { return cRunatKeyword_3_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_3_1_1() { return cEqualsSignKeyword_3_1_1; }

		//runat=("client" | "server")
		public Assignment getRunatAssignment_3_1_2() { return cRunatAssignment_3_1_2; }

		//"client" | "server"
		public Alternatives getRunatAlternatives_3_1_2_0() { return cRunatAlternatives_3_1_2_0; }

		//"client"
		public Keyword getRunatClientKeyword_3_1_2_0_0() { return cRunatClientKeyword_3_1_2_0_0; }

		//"server"
		public Keyword getRunatServerKeyword_3_1_2_0_1() { return cRunatServerKeyword_3_1_2_0_1; }

		//("exec" "=" exec=[LogicElement])?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"exec"
		public Keyword getExecKeyword_3_2_0() { return cExecKeyword_3_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3_2_1() { return cEqualsSignKeyword_3_2_1; }

		//exec=[LogicElement]
		public Assignment getExecAssignment_3_2_2() { return cExecAssignment_3_2_2; }

		//[LogicElement]
		public CrossReference getExecLogicElementCrossReference_3_2_2_0() { return cExecLogicElementCrossReference_3_2_2_0; }

		//ID
		public RuleCall getExecLogicElementIDTerminalRuleCall_3_2_2_0_1() { return cExecLogicElementIDTerminalRuleCall_3_2_2_0_1; }

		//source=XBlockExpression?
		public Assignment getSourceAssignment_4() { return cSourceAssignment_4; }

		//XBlockExpression
		public RuleCall getSourceXBlockExpressionParserRuleCall_4_0() { return cSourceXBlockExpressionParserRuleCall_4_0; }
	}

	public class CodeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CodeElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIdKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdINTTerminalRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		
		//CodeElement:
		//
		//	"code" name=ID "id" "=" id=INT;
		public ParserRule getRule() { return rule; }

		//"code" name=ID "id" "=" id=INT
		public Group getGroup() { return cGroup; }

		//"code"
		public Keyword getCodeKeyword_0() { return cCodeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"id"
		public Keyword getIdKeyword_2() { return cIdKeyword_2; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//id=INT
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }

		//INT
		public RuleCall getIdINTTerminalRuleCall_4_0() { return cIdINTTerminalRuleCall_4_0; }
	}

	public class LookupElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LookupElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLookupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLogicAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLogicLogicElementParserRuleCall_3_0 = (RuleCall)cLogicAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LookupElement:
		//
		//	"lookup" name=ID "{" logic+=LogicElement* "}";
		public ParserRule getRule() { return rule; }

		//"lookup" name=ID "{" logic+=LogicElement* "}"
		public Group getGroup() { return cGroup; }

		//"lookup"
		public Keyword getLookupKeyword_0() { return cLookupKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//logic+=LogicElement*
		public Assignment getLogicAssignment_3() { return cLogicAssignment_3; }

		//LogicElement
		public RuleCall getLogicLogicElementParserRuleCall_3_0() { return cLogicLogicElementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class TemplateElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTemplateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cDefinitionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDefinitionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefinitionJvmTypeReferenceParserRuleCall_4_0 = (RuleCall)cDefinitionAssignment_4.eContents().get(0);
		
		//TemplateElement:
		//
		//	"template" name=ID "definition" "=" definition=JvmTypeReference;
		public ParserRule getRule() { return rule; }

		//"template" name=ID "definition" "=" definition=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//"template"
		public Keyword getTemplateKeyword_0() { return cTemplateKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"definition"
		public Keyword getDefinitionKeyword_2() { return cDefinitionKeyword_2; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//definition=JvmTypeReference
		public Assignment getDefinitionAssignment_4() { return cDefinitionAssignment_4; }

		//JvmTypeReference
		public RuleCall getDefinitionJvmTypeReferenceParserRuleCall_4_0() { return cDefinitionJvmTypeReferenceParserRuleCall_4_0; }
	}

	public class FormElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFormKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cModalKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cModalAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cModalBooleanTypeParserRuleCall_2_0_2_0 = (RuleCall)cModalAssignment_2_0_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cColumnsKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cColumnsAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cColumnsINTTerminalRuleCall_2_1_2_0 = (RuleCall)cColumnsAssignment_2_1_2.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cTextKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final Assignment cTextAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final CrossReference cTextTranslationElementCrossReference_2_2_2_0 = (CrossReference)cTextAssignment_2_2_2.eContents().get(0);
		private final RuleCall cTextTranslationElementIDTerminalRuleCall_2_2_2_0_1 = (RuleCall)cTextTranslationElementCrossReference_2_2_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cLogicAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cLogicLogicElementParserRuleCall_3_1_0_0 = (RuleCall)cLogicAssignment_3_1_0.eContents().get(0);
		private final Assignment cFieldsAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cFieldsFormFieldElementParserRuleCall_3_1_1_0 = (RuleCall)cFieldsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//FormElement:
		//
		//	"form" name=ID (("modal" "=" modal=BooleanType)? & ("columns" "=" columns=INT)? & ("text" "="
		//
		//	text=[TranslationElement])?) ("{" (logic+=LogicElement | fields+=FormFieldElement)* "}")?;
		public ParserRule getRule() { return rule; }

		//"form" name=ID (("modal" "=" modal=BooleanType)? & ("columns" "=" columns=INT)? & ("text" "="
		//
		//text=[TranslationElement])?) ("{" (logic+=LogicElement | fields+=FormFieldElement)* "}")?
		public Group getGroup() { return cGroup; }

		//"form"
		public Keyword getFormKeyword_0() { return cFormKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("modal" "=" modal=BooleanType)? & ("columns" "=" columns=INT)? & ("text" "=" text=[TranslationElement])?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//("modal" "=" modal=BooleanType)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"modal"
		public Keyword getModalKeyword_2_0_0() { return cModalKeyword_2_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_0_1() { return cEqualsSignKeyword_2_0_1; }

		//modal=BooleanType
		public Assignment getModalAssignment_2_0_2() { return cModalAssignment_2_0_2; }

		//BooleanType
		public RuleCall getModalBooleanTypeParserRuleCall_2_0_2_0() { return cModalBooleanTypeParserRuleCall_2_0_2_0; }

		//("columns" "=" columns=INT)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"columns"
		public Keyword getColumnsKeyword_2_1_0() { return cColumnsKeyword_2_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1() { return cEqualsSignKeyword_2_1_1; }

		//columns=INT
		public Assignment getColumnsAssignment_2_1_2() { return cColumnsAssignment_2_1_2; }

		//INT
		public RuleCall getColumnsINTTerminalRuleCall_2_1_2_0() { return cColumnsINTTerminalRuleCall_2_1_2_0; }

		//("text" "=" text=[TranslationElement])?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"text"
		public Keyword getTextKeyword_2_2_0() { return cTextKeyword_2_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_2_1() { return cEqualsSignKeyword_2_2_1; }

		//text=[TranslationElement]
		public Assignment getTextAssignment_2_2_2() { return cTextAssignment_2_2_2; }

		//[TranslationElement]
		public CrossReference getTextTranslationElementCrossReference_2_2_2_0() { return cTextTranslationElementCrossReference_2_2_2_0; }

		//ID
		public RuleCall getTextTranslationElementIDTerminalRuleCall_2_2_2_0_1() { return cTextTranslationElementIDTerminalRuleCall_2_2_2_0_1; }

		//("{" (logic+=LogicElement | fields+=FormFieldElement)* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//(logic+=LogicElement | fields+=FormFieldElement)*
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//logic+=LogicElement
		public Assignment getLogicAssignment_3_1_0() { return cLogicAssignment_3_1_0; }

		//LogicElement
		public RuleCall getLogicLogicElementParserRuleCall_3_1_0_0() { return cLogicLogicElementParserRuleCall_3_1_0_0; }

		//fields+=FormFieldElement
		public Assignment getFieldsAssignment_3_1_1() { return cFieldsAssignment_3_1_1; }

		//FormFieldElement
		public RuleCall getFieldsFormFieldElementParserRuleCall_3_1_1_0() { return cFieldsFormFieldElementParserRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class FormFieldElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormFieldElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompositeFieldElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValueFieldElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// UI FIELDS
		// FormFieldElement:
		//
		//	CompositeFieldElement | ValueFieldElement;
		public ParserRule getRule() { return rule; }

		//CompositeFieldElement | ValueFieldElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//CompositeFieldElement
		public RuleCall getCompositeFieldElementParserRuleCall_0() { return cCompositeFieldElementParserRuleCall_0; }

		//ValueFieldElement
		public RuleCall getValueFieldElementParserRuleCall_1() { return cValueFieldElementParserRuleCall_1; }
	}

	public class FormFieldPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormFieldProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFormFieldPropertiesAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cTextKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cTextAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final CrossReference cTextTranslationElementCrossReference_1_0_2_0 = (CrossReference)cTextAssignment_1_0_2.eContents().get(0);
		private final RuleCall cTextTranslationElementIDTerminalRuleCall_1_0_2_0_1 = (RuleCall)cTextTranslationElementCrossReference_1_0_2_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cEnabledKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cEnabledAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cEnabledBooleanTypeParserRuleCall_1_1_2_0 = (RuleCall)cEnabledAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cUnorderedGroup_1.eContents().get(2);
		private final Keyword cVisibleKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cVisibleAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cVisibleBooleanTypeParserRuleCall_1_2_2_0 = (RuleCall)cVisibleAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cUnorderedGroup_1.eContents().get(3);
		private final Keyword cMasterKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cMasterAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final CrossReference cMasterValueFieldElementCrossReference_1_3_2_0 = (CrossReference)cMasterAssignment_1_3_2.eContents().get(0);
		private final RuleCall cMasterValueFieldElementIDTerminalRuleCall_1_3_2_0_1 = (RuleCall)cMasterValueFieldElementCrossReference_1_3_2_0.eContents().get(1);
		
		//FormFieldProperties:
		//
		//	{FormFieldProperties} (("text" "=" text=[TranslationElement])? & ("enabled" "=" enabled=BooleanType)? & ("visible"
		//
		//	"=" visible=BooleanType)? & ("master" "=" master=[ValueFieldElement])?);
		public ParserRule getRule() { return rule; }

		//{FormFieldProperties} (("text" "=" text=[TranslationElement])? & ("enabled" "=" enabled=BooleanType)? & ("visible" "="
		//
		//visible=BooleanType)? & ("master" "=" master=[ValueFieldElement])?)
		public Group getGroup() { return cGroup; }

		//{FormFieldProperties}
		public Action getFormFieldPropertiesAction_0() { return cFormFieldPropertiesAction_0; }

		//("text" "=" text=[TranslationElement])? & ("enabled" "=" enabled=BooleanType)? & ("visible" "=" visible=BooleanType)? &
		//
		//("master" "=" master=[ValueFieldElement])?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//("text" "=" text=[TranslationElement])?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"text"
		public Keyword getTextKeyword_1_0_0() { return cTextKeyword_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_0_1() { return cEqualsSignKeyword_1_0_1; }

		//text=[TranslationElement]
		public Assignment getTextAssignment_1_0_2() { return cTextAssignment_1_0_2; }

		//[TranslationElement]
		public CrossReference getTextTranslationElementCrossReference_1_0_2_0() { return cTextTranslationElementCrossReference_1_0_2_0; }

		//ID
		public RuleCall getTextTranslationElementIDTerminalRuleCall_1_0_2_0_1() { return cTextTranslationElementIDTerminalRuleCall_1_0_2_0_1; }

		//("enabled" "=" enabled=BooleanType)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"enabled"
		public Keyword getEnabledKeyword_1_1_0() { return cEnabledKeyword_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1_1() { return cEqualsSignKeyword_1_1_1; }

		//enabled=BooleanType
		public Assignment getEnabledAssignment_1_1_2() { return cEnabledAssignment_1_1_2; }

		//BooleanType
		public RuleCall getEnabledBooleanTypeParserRuleCall_1_1_2_0() { return cEnabledBooleanTypeParserRuleCall_1_1_2_0; }

		//("visible" "=" visible=BooleanType)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"visible"
		public Keyword getVisibleKeyword_1_2_0() { return cVisibleKeyword_1_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_2_1() { return cEqualsSignKeyword_1_2_1; }

		//visible=BooleanType
		public Assignment getVisibleAssignment_1_2_2() { return cVisibleAssignment_1_2_2; }

		//BooleanType
		public RuleCall getVisibleBooleanTypeParserRuleCall_1_2_2_0() { return cVisibleBooleanTypeParserRuleCall_1_2_2_0; }

		//("master" "=" master=[ValueFieldElement])?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"master"
		public Keyword getMasterKeyword_1_3_0() { return cMasterKeyword_1_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_3_1() { return cEqualsSignKeyword_1_3_1; }

		//master=[ValueFieldElement]
		public Assignment getMasterAssignment_1_3_2() { return cMasterAssignment_1_3_2; }

		//[ValueFieldElement]
		public CrossReference getMasterValueFieldElementCrossReference_1_3_2_0() { return cMasterValueFieldElementCrossReference_1_3_2_0; }

		//ID
		public RuleCall getMasterValueFieldElementIDTerminalRuleCall_1_3_2_0_1() { return cMasterValueFieldElementIDTerminalRuleCall_1_3_2_0_1; }
	}

	public class CompositeFieldElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeFieldElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSequenceBoxElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGroupBoxElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// COMPOSITES
		// CompositeFieldElement:
		//
		//	SequenceBoxElement | GroupBoxElement;
		public ParserRule getRule() { return rule; }

		//SequenceBoxElement | GroupBoxElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//SequenceBoxElement
		public RuleCall getSequenceBoxElementParserRuleCall_0() { return cSequenceBoxElementParserRuleCall_0; }

		//GroupBoxElement
		public RuleCall getGroupBoxElementParserRuleCall_1() { return cGroupBoxElementParserRuleCall_1; }
	}

	public class SequenceBoxElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SequenceBoxElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSequence_boxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cFormFieldPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormFieldPropertiesFormFieldPropertiesParserRuleCall_2_0 = (RuleCall)cFormFieldPropertiesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cLogicAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cLogicLogicElementParserRuleCall_3_1_0_0 = (RuleCall)cLogicAssignment_3_1_0.eContents().get(0);
		private final Assignment cFieldsAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cFieldsFormFieldElementParserRuleCall_3_1_1_0 = (RuleCall)cFieldsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//SequenceBoxElement:
		//
		//	"sequence_box" name=ID formFieldProperties=FormFieldProperties ("{" (logic+=LogicElement | fields+=FormFieldElement)*
		//
		//	"}")?;
		public ParserRule getRule() { return rule; }

		//"sequence_box" name=ID formFieldProperties=FormFieldProperties ("{" (logic+=LogicElement | fields+=FormFieldElement)*
		//
		//"}")?
		public Group getGroup() { return cGroup; }

		//"sequence_box"
		public Keyword getSequence_boxKeyword_0() { return cSequence_boxKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//formFieldProperties=FormFieldProperties
		public Assignment getFormFieldPropertiesAssignment_2() { return cFormFieldPropertiesAssignment_2; }

		//FormFieldProperties
		public RuleCall getFormFieldPropertiesFormFieldPropertiesParserRuleCall_2_0() { return cFormFieldPropertiesFormFieldPropertiesParserRuleCall_2_0; }

		//("{" (logic+=LogicElement | fields+=FormFieldElement)* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//(logic+=LogicElement | fields+=FormFieldElement)*
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//logic+=LogicElement
		public Assignment getLogicAssignment_3_1_0() { return cLogicAssignment_3_1_0; }

		//LogicElement
		public RuleCall getLogicLogicElementParserRuleCall_3_1_0_0() { return cLogicLogicElementParserRuleCall_3_1_0_0; }

		//fields+=FormFieldElement
		public Assignment getFieldsAssignment_3_1_1() { return cFieldsAssignment_3_1_1; }

		//FormFieldElement
		public RuleCall getFieldsFormFieldElementParserRuleCall_3_1_1_0() { return cFieldsFormFieldElementParserRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class GroupBoxElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupBoxElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroup_boxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cFormFieldPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormFieldPropertiesFormFieldPropertiesParserRuleCall_2_0 = (RuleCall)cFormFieldPropertiesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cLogicAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cLogicLogicElementParserRuleCall_3_1_0_0 = (RuleCall)cLogicAssignment_3_1_0.eContents().get(0);
		private final Assignment cFieldsAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cFieldsFormFieldElementParserRuleCall_3_1_1_0 = (RuleCall)cFieldsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//GroupBoxElement:
		//
		//	"group_box" name=ID formFieldProperties=FormFieldProperties ("{" (logic+=LogicElement | fields+=FormFieldElement)*
		//
		//	"}")?;
		public ParserRule getRule() { return rule; }

		//"group_box" name=ID formFieldProperties=FormFieldProperties ("{" (logic+=LogicElement | fields+=FormFieldElement)* "}")?
		public Group getGroup() { return cGroup; }

		//"group_box"
		public Keyword getGroup_boxKeyword_0() { return cGroup_boxKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//formFieldProperties=FormFieldProperties
		public Assignment getFormFieldPropertiesAssignment_2() { return cFormFieldPropertiesAssignment_2; }

		//FormFieldProperties
		public RuleCall getFormFieldPropertiesFormFieldPropertiesParserRuleCall_2_0() { return cFormFieldPropertiesFormFieldPropertiesParserRuleCall_2_0; }

		//("{" (logic+=LogicElement | fields+=FormFieldElement)* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//(logic+=LogicElement | fields+=FormFieldElement)*
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//logic+=LogicElement
		public Assignment getLogicAssignment_3_1_0() { return cLogicAssignment_3_1_0; }

		//LogicElement
		public RuleCall getLogicLogicElementParserRuleCall_3_1_0_0() { return cLogicLogicElementParserRuleCall_3_1_0_0; }

		//fields+=FormFieldElement
		public Assignment getFieldsAssignment_3_1_1() { return cFieldsAssignment_3_1_1; }

		//FormFieldElement
		public RuleCall getFieldsFormFieldElementParserRuleCall_3_1_1_0() { return cFieldsFormFieldElementParserRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class ValueFieldElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueFieldElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDoubleElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLongElementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDateElementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSmartfieldElementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCustomFieldElementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// VALUE FIELDS
		// ValueFieldElement:
		//
		//	StringElement | DoubleElement | LongElement | DateElement | SmartfieldElement | CustomFieldElement;
		public ParserRule getRule() { return rule; }

		//StringElement | DoubleElement | LongElement | DateElement | SmartfieldElement | CustomFieldElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringElement
		public RuleCall getStringElementParserRuleCall_0() { return cStringElementParserRuleCall_0; }

		//DoubleElement
		public RuleCall getDoubleElementParserRuleCall_1() { return cDoubleElementParserRuleCall_1; }

		//LongElement
		public RuleCall getLongElementParserRuleCall_2() { return cLongElementParserRuleCall_2; }

		//DateElement
		public RuleCall getDateElementParserRuleCall_3() { return cDateElementParserRuleCall_3; }

		//SmartfieldElement
		public RuleCall getSmartfieldElementParserRuleCall_4() { return cSmartfieldElementParserRuleCall_4; }

		//CustomFieldElement
		public RuleCall getCustomFieldElementParserRuleCall_5() { return cCustomFieldElementParserRuleCall_5; }
	}

	public class ValueFieldPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueFieldProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValueFieldPropertiesAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cFormFieldPropertiesAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final RuleCall cFormFieldPropertiesFormFieldPropertiesParserRuleCall_1_0_0 = (RuleCall)cFormFieldPropertiesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cMandatoryKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cMandatoryAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cMandatoryBooleanTypeParserRuleCall_1_1_2_0 = (RuleCall)cMandatoryAssignment_1_1_2.eContents().get(0);
		
		//ValueFieldProperties:
		//
		//	{ValueFieldProperties} (formFieldProperties=FormFieldProperties & ("mandatory" "=" mandatory=BooleanType)?);
		public ParserRule getRule() { return rule; }

		//{ValueFieldProperties} (formFieldProperties=FormFieldProperties & ("mandatory" "=" mandatory=BooleanType)?)
		public Group getGroup() { return cGroup; }

		//{ValueFieldProperties}
		public Action getValueFieldPropertiesAction_0() { return cValueFieldPropertiesAction_0; }

		//formFieldProperties=FormFieldProperties & ("mandatory" "=" mandatory=BooleanType)?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//formFieldProperties=FormFieldProperties
		public Assignment getFormFieldPropertiesAssignment_1_0() { return cFormFieldPropertiesAssignment_1_0; }

		//FormFieldProperties
		public RuleCall getFormFieldPropertiesFormFieldPropertiesParserRuleCall_1_0_0() { return cFormFieldPropertiesFormFieldPropertiesParserRuleCall_1_0_0; }

		//("mandatory" "=" mandatory=BooleanType)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"mandatory"
		public Keyword getMandatoryKeyword_1_1_0() { return cMandatoryKeyword_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1_1() { return cEqualsSignKeyword_1_1_1; }

		//mandatory=BooleanType
		public Assignment getMandatoryAssignment_1_1_2() { return cMandatoryAssignment_1_1_2; }

		//BooleanType
		public RuleCall getMandatoryBooleanTypeParserRuleCall_1_1_2_0() { return cMandatoryBooleanTypeParserRuleCall_1_1_2_0; }
	}

	public class StringElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cValueFieldPropertiesAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cValueFieldPropertiesValueFieldPropertiesParserRuleCall_2_0_0 = (RuleCall)cValueFieldPropertiesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cMaxlenKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cMaxlenAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cMaxlenINTTerminalRuleCall_2_1_2_0 = (RuleCall)cMaxlenAssignment_2_1_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLogicAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLogicLogicElementParserRuleCall_3_1_0 = (RuleCall)cLogicAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//StringElement:
		//
		//	"string" name=ID (valueFieldProperties=ValueFieldProperties & ("maxlen" "=" maxlen=INT)?) ("{" logic+=LogicElement*
		//
		//	"}")?;
		public ParserRule getRule() { return rule; }

		//"string" name=ID (valueFieldProperties=ValueFieldProperties & ("maxlen" "=" maxlen=INT)?) ("{" logic+=LogicElement*
		//
		//"}")?
		public Group getGroup() { return cGroup; }

		//"string"
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//valueFieldProperties=ValueFieldProperties & ("maxlen" "=" maxlen=INT)?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//valueFieldProperties=ValueFieldProperties
		public Assignment getValueFieldPropertiesAssignment_2_0() { return cValueFieldPropertiesAssignment_2_0; }

		//ValueFieldProperties
		public RuleCall getValueFieldPropertiesValueFieldPropertiesParserRuleCall_2_0_0() { return cValueFieldPropertiesValueFieldPropertiesParserRuleCall_2_0_0; }

		//("maxlen" "=" maxlen=INT)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"maxlen"
		public Keyword getMaxlenKeyword_2_1_0() { return cMaxlenKeyword_2_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1() { return cEqualsSignKeyword_2_1_1; }

		//maxlen=INT
		public Assignment getMaxlenAssignment_2_1_2() { return cMaxlenAssignment_2_1_2; }

		//INT
		public RuleCall getMaxlenINTTerminalRuleCall_2_1_2_0() { return cMaxlenINTTerminalRuleCall_2_1_2_0; }

		//("{" logic+=LogicElement* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//logic+=LogicElement*
		public Assignment getLogicAssignment_3_1() { return cLogicAssignment_3_1; }

		//LogicElement
		public RuleCall getLogicLogicElementParserRuleCall_3_1_0() { return cLogicLogicElementParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class DoubleElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoubleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueFieldPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueFieldPropertiesValueFieldPropertiesParserRuleCall_2_0 = (RuleCall)cValueFieldPropertiesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLogicAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLogicLogicElementParserRuleCall_3_1_0 = (RuleCall)cLogicAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//DoubleElement:
		//
		//	"double" name=ID valueFieldProperties=ValueFieldProperties ("{" logic+=LogicElement* "}")?;
		public ParserRule getRule() { return rule; }

		//"double" name=ID valueFieldProperties=ValueFieldProperties ("{" logic+=LogicElement* "}")?
		public Group getGroup() { return cGroup; }

		//"double"
		public Keyword getDoubleKeyword_0() { return cDoubleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//valueFieldProperties=ValueFieldProperties
		public Assignment getValueFieldPropertiesAssignment_2() { return cValueFieldPropertiesAssignment_2; }

		//ValueFieldProperties
		public RuleCall getValueFieldPropertiesValueFieldPropertiesParserRuleCall_2_0() { return cValueFieldPropertiesValueFieldPropertiesParserRuleCall_2_0; }

		//("{" logic+=LogicElement* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//logic+=LogicElement*
		public Assignment getLogicAssignment_3_1() { return cLogicAssignment_3_1; }

		//LogicElement
		public RuleCall getLogicLogicElementParserRuleCall_3_1_0() { return cLogicLogicElementParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class LongElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LongElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLongKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueFieldPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueFieldPropertiesValueFieldPropertiesParserRuleCall_2_0 = (RuleCall)cValueFieldPropertiesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLogicAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLogicLogicElementParserRuleCall_3_1_0 = (RuleCall)cLogicAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//LongElement:
		//
		//	"long" name=ID valueFieldProperties=ValueFieldProperties ("{" logic+=LogicElement* "}")?;
		public ParserRule getRule() { return rule; }

		//"long" name=ID valueFieldProperties=ValueFieldProperties ("{" logic+=LogicElement* "}")?
		public Group getGroup() { return cGroup; }

		//"long"
		public Keyword getLongKeyword_0() { return cLongKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//valueFieldProperties=ValueFieldProperties
		public Assignment getValueFieldPropertiesAssignment_2() { return cValueFieldPropertiesAssignment_2; }

		//ValueFieldProperties
		public RuleCall getValueFieldPropertiesValueFieldPropertiesParserRuleCall_2_0() { return cValueFieldPropertiesValueFieldPropertiesParserRuleCall_2_0; }

		//("{" logic+=LogicElement* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//logic+=LogicElement*
		public Assignment getLogicAssignment_3_1() { return cLogicAssignment_3_1; }

		//LogicElement
		public RuleCall getLogicLogicElementParserRuleCall_3_1_0() { return cLogicLogicElementParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class DateElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueFieldPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueFieldPropertiesValueFieldPropertiesParserRuleCall_2_0 = (RuleCall)cValueFieldPropertiesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLogicAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLogicLogicElementParserRuleCall_3_1_0 = (RuleCall)cLogicAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//DateElement:
		//
		//	"date" name=ID valueFieldProperties=ValueFieldProperties ("{" logic+=LogicElement* "}")?;
		public ParserRule getRule() { return rule; }

		//"date" name=ID valueFieldProperties=ValueFieldProperties ("{" logic+=LogicElement* "}")?
		public Group getGroup() { return cGroup; }

		//"date"
		public Keyword getDateKeyword_0() { return cDateKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//valueFieldProperties=ValueFieldProperties
		public Assignment getValueFieldPropertiesAssignment_2() { return cValueFieldPropertiesAssignment_2; }

		//ValueFieldProperties
		public RuleCall getValueFieldPropertiesValueFieldPropertiesParserRuleCall_2_0() { return cValueFieldPropertiesValueFieldPropertiesParserRuleCall_2_0; }

		//("{" logic+=LogicElement* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//logic+=LogicElement*
		public Assignment getLogicAssignment_3_1() { return cLogicAssignment_3_1; }

		//LogicElement
		public RuleCall getLogicLogicElementParserRuleCall_3_1_0() { return cLogicLogicElementParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class SmartfieldElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SmartfieldElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSmartfieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cValueFieldPropertiesAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cValueFieldPropertiesValueFieldPropertiesParserRuleCall_2_0_0 = (RuleCall)cValueFieldPropertiesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cCodeKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cCodeAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final CrossReference cCodeCodeElementCrossReference_2_1_2_0 = (CrossReference)cCodeAssignment_2_1_2.eContents().get(0);
		private final RuleCall cCodeCodeElementIDTerminalRuleCall_2_1_2_0_1 = (RuleCall)cCodeCodeElementCrossReference_2_1_2_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cValue_typeKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final Assignment cValueTypeAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final RuleCall cValueTypeJvmTypeReferenceParserRuleCall_2_2_2_0 = (RuleCall)cValueTypeAssignment_2_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cUnorderedGroup_2.eContents().get(3);
		private final Keyword cLookupKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_3_1 = (Keyword)cGroup_2_3.eContents().get(1);
		private final Assignment cLookupAssignment_2_3_2 = (Assignment)cGroup_2_3.eContents().get(2);
		private final CrossReference cLookupLookupElementCrossReference_2_3_2_0 = (CrossReference)cLookupAssignment_2_3_2.eContents().get(0);
		private final RuleCall cLookupLookupElementIDTerminalRuleCall_2_3_2_0_1 = (RuleCall)cLookupLookupElementCrossReference_2_3_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLogicAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLogicLogicElementParserRuleCall_3_1_0 = (RuleCall)cLogicAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//SmartfieldElement:
		//
		//	"smartfield" name=ID (valueFieldProperties=ValueFieldProperties? & ("code" "=" code=[CodeElement])? & ("value_type"
		//
		//	"=" valueType=JvmTypeReference)? & ("lookup" "=" lookup=[LookupElement])?) ("{" logic+=LogicElement* "}")?;
		public ParserRule getRule() { return rule; }

		//"smartfield" name=ID (valueFieldProperties=ValueFieldProperties? & ("code" "=" code=[CodeElement])? & ("value_type" "="
		//
		//valueType=JvmTypeReference)? & ("lookup" "=" lookup=[LookupElement])?) ("{" logic+=LogicElement* "}")?
		public Group getGroup() { return cGroup; }

		//"smartfield"
		public Keyword getSmartfieldKeyword_0() { return cSmartfieldKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//valueFieldProperties=ValueFieldProperties? & ("code" "=" code=[CodeElement])? & ("value_type" "="
		//
		//valueType=JvmTypeReference)? & ("lookup" "=" lookup=[LookupElement])?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//valueFieldProperties=ValueFieldProperties?
		public Assignment getValueFieldPropertiesAssignment_2_0() { return cValueFieldPropertiesAssignment_2_0; }

		//ValueFieldProperties
		public RuleCall getValueFieldPropertiesValueFieldPropertiesParserRuleCall_2_0_0() { return cValueFieldPropertiesValueFieldPropertiesParserRuleCall_2_0_0; }

		//("code" "=" code=[CodeElement])?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"code"
		public Keyword getCodeKeyword_2_1_0() { return cCodeKeyword_2_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1() { return cEqualsSignKeyword_2_1_1; }

		//code=[CodeElement]
		public Assignment getCodeAssignment_2_1_2() { return cCodeAssignment_2_1_2; }

		//[CodeElement]
		public CrossReference getCodeCodeElementCrossReference_2_1_2_0() { return cCodeCodeElementCrossReference_2_1_2_0; }

		//ID
		public RuleCall getCodeCodeElementIDTerminalRuleCall_2_1_2_0_1() { return cCodeCodeElementIDTerminalRuleCall_2_1_2_0_1; }

		//("value_type" "=" valueType=JvmTypeReference)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"value_type"
		public Keyword getValue_typeKeyword_2_2_0() { return cValue_typeKeyword_2_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_2_1() { return cEqualsSignKeyword_2_2_1; }

		//valueType=JvmTypeReference
		public Assignment getValueTypeAssignment_2_2_2() { return cValueTypeAssignment_2_2_2; }

		//JvmTypeReference
		public RuleCall getValueTypeJvmTypeReferenceParserRuleCall_2_2_2_0() { return cValueTypeJvmTypeReferenceParserRuleCall_2_2_2_0; }

		//("lookup" "=" lookup=[LookupElement])?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//"lookup"
		public Keyword getLookupKeyword_2_3_0() { return cLookupKeyword_2_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_3_1() { return cEqualsSignKeyword_2_3_1; }

		//lookup=[LookupElement]
		public Assignment getLookupAssignment_2_3_2() { return cLookupAssignment_2_3_2; }

		//[LookupElement]
		public CrossReference getLookupLookupElementCrossReference_2_3_2_0() { return cLookupLookupElementCrossReference_2_3_2_0; }

		//ID
		public RuleCall getLookupLookupElementIDTerminalRuleCall_2_3_2_0_1() { return cLookupLookupElementIDTerminalRuleCall_2_3_2_0_1; }

		//("{" logic+=LogicElement* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//logic+=LogicElement*
		public Assignment getLogicAssignment_3_1() { return cLogicAssignment_3_1; }

		//LogicElement
		public RuleCall getLogicLogicElementParserRuleCall_3_1_0() { return cLogicLogicElementParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class CustomFieldElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomFieldElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCustom_fieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTemplateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTemplateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTemplateTemplateElementCrossReference_4_0 = (CrossReference)cTemplateAssignment_4.eContents().get(0);
		private final RuleCall cTemplateTemplateElementIDTerminalRuleCall_4_0_1 = (RuleCall)cTemplateTemplateElementCrossReference_4_0.eContents().get(1);
		private final Assignment cFormFieldPropertiesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFormFieldPropertiesFormFieldPropertiesParserRuleCall_5_0 = (RuleCall)cFormFieldPropertiesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Alternatives cAlternatives_6_1 = (Alternatives)cGroup_6.eContents().get(1);
		private final Assignment cLogicAssignment_6_1_0 = (Assignment)cAlternatives_6_1.eContents().get(0);
		private final RuleCall cLogicLogicElementParserRuleCall_6_1_0_0 = (RuleCall)cLogicAssignment_6_1_0.eContents().get(0);
		private final Assignment cFieldsAssignment_6_1_1 = (Assignment)cAlternatives_6_1.eContents().get(1);
		private final RuleCall cFieldsFormFieldElementParserRuleCall_6_1_1_0 = (RuleCall)cFieldsAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//// CUSTOM FIELDS
		// CustomFieldElement:
		//
		//	"custom_field" name=ID "template" "=" template=[TemplateElement] formFieldProperties=FormFieldProperties ("{"
		//
		//	(logic+=LogicElement | fields+=FormFieldElement)* "}")?;
		public ParserRule getRule() { return rule; }

		//"custom_field" name=ID "template" "=" template=[TemplateElement] formFieldProperties=FormFieldProperties ("{"
		//
		//(logic+=LogicElement | fields+=FormFieldElement)* "}")?
		public Group getGroup() { return cGroup; }

		//"custom_field"
		public Keyword getCustom_fieldKeyword_0() { return cCustom_fieldKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"template"
		public Keyword getTemplateKeyword_2() { return cTemplateKeyword_2; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//template=[TemplateElement]
		public Assignment getTemplateAssignment_4() { return cTemplateAssignment_4; }

		//[TemplateElement]
		public CrossReference getTemplateTemplateElementCrossReference_4_0() { return cTemplateTemplateElementCrossReference_4_0; }

		//ID
		public RuleCall getTemplateTemplateElementIDTerminalRuleCall_4_0_1() { return cTemplateTemplateElementIDTerminalRuleCall_4_0_1; }

		//formFieldProperties=FormFieldProperties
		public Assignment getFormFieldPropertiesAssignment_5() { return cFormFieldPropertiesAssignment_5; }

		//FormFieldProperties
		public RuleCall getFormFieldPropertiesFormFieldPropertiesParserRuleCall_5_0() { return cFormFieldPropertiesFormFieldPropertiesParserRuleCall_5_0; }

		//("{" (logic+=LogicElement | fields+=FormFieldElement)* "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_0() { return cLeftCurlyBracketKeyword_6_0; }

		//(logic+=LogicElement | fields+=FormFieldElement)*
		public Alternatives getAlternatives_6_1() { return cAlternatives_6_1; }

		//logic+=LogicElement
		public Assignment getLogicAssignment_6_1_0() { return cLogicAssignment_6_1_0; }

		//LogicElement
		public RuleCall getLogicLogicElementParserRuleCall_6_1_0_0() { return cLogicLogicElementParserRuleCall_6_1_0_0; }

		//fields+=FormFieldElement
		public Assignment getFieldsAssignment_6_1_1() { return cFieldsAssignment_6_1_1; }

		//FormFieldElement
		public RuleCall getFieldsFormFieldElementParserRuleCall_6_1_1_0() { return cFieldsFormFieldElementParserRuleCall_6_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_2() { return cRightCurlyBracketKeyword_6_2; }
	}

	public class XBlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXBlockExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionsXExpressionInsideBlockParserRuleCall_2_0_0 = (RuleCall)cExpressionsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XBlockExpression returns xbase::XBlockExpression:
		//
		//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";")* "}";
		public ParserRule getRule() { return rule; }

		//{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";")* "}"
		public Group getGroup() { return cGroup; }

		//{XBlockExpression}
		public Action getXBlockExpressionAction_0() { return cXBlockExpressionAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(expressions+=XExpressionInsideBlock ";")*
		public Group getGroup_2() { return cGroup_2; }

		//expressions+=XExpressionInsideBlock
		public Assignment getExpressionsAssignment_2_0() { return cExpressionsAssignment_2_0; }

		//XExpressionInsideBlock
		public RuleCall getExpressionsXExpressionInsideBlockParserRuleCall_2_0_0() { return cExpressionsXExpressionInsideBlockParserRuleCall_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class XExpressionInsideBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpressionInsideBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XExpressionInsideBlock returns xbase::XExpression:
		//
		//	XVariableDeclaration | XExpression;
		public ParserRule getRule() { return rule; }

		//=> XVariableDeclaration | XExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> XVariableDeclaration
		public RuleCall getXVariableDeclarationParserRuleCall_0() { return cXVariableDeclarationParserRuleCall_0; }

		//XExpression
		public RuleCall getXExpressionParserRuleCall_1() { return cXExpressionParserRuleCall_1; }
	}

	public class XVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRightAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRightXExpressionParserRuleCall_3_1_0 = (RuleCall)cRightAssignment_3_1.eContents().get(0);
		
		//XVariableDeclaration returns xbase::XVariableDeclaration:
		//
		//	{XVariableDeclaration} type=JvmTypeReference name=ValidID ("=" right=XExpression)?;
		public ParserRule getRule() { return rule; }

		//{XVariableDeclaration} type=JvmTypeReference name=ValidID ("=" right=XExpression)?
		public Group getGroup() { return cGroup; }

		//{XVariableDeclaration}
		public Action getXVariableDeclarationAction_0() { return cXVariableDeclarationAction_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//("=" right=XExpression)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//right=XExpression
		public Assignment getRightAssignment_3_1() { return cRightAssignment_3_1; }

		//XExpression
		public RuleCall getRightXExpressionParserRuleCall_3_1_0() { return cRightXExpressionParserRuleCall_3_1_0; }
	}

	public class XLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXNumberLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXNullLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXStringLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXTypeLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//XLiteral returns xbase::XExpression:
		//
		//	XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
		public ParserRule getRule() { return rule; }

		//XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//XBooleanLiteral
		public RuleCall getXBooleanLiteralParserRuleCall_0() { return cXBooleanLiteralParserRuleCall_0; }

		//XNumberLiteral
		public RuleCall getXNumberLiteralParserRuleCall_1() { return cXNumberLiteralParserRuleCall_1; }

		//XNullLiteral
		public RuleCall getXNullLiteralParserRuleCall_2() { return cXNullLiteralParserRuleCall_2; }

		//XStringLiteral
		public RuleCall getXStringLiteralParserRuleCall_3() { return cXStringLiteralParserRuleCall_3; }

		//XTypeLiteral
		public RuleCall getXTypeLiteralParserRuleCall_4() { return cXTypeLiteralParserRuleCall_4; }
	}

	public class XTypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XTypeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXTypeLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeJvmTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeJvmTypeCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cClassKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////
		// // TODO: this makes code completion freeze for feauture access
		// XTypeLiteral returns xbase::XExpression:
		//
		//	{xbase::XTypeLiteral} type=[types::JvmType|QualifiedName] "." "class";
		public ParserRule getRule() { return rule; }

		//{xbase::XTypeLiteral} type=[types::JvmType|QualifiedName] "." "class"
		public Group getGroup() { return cGroup; }

		//{xbase::XTypeLiteral}
		public Action getXTypeLiteralAction_0() { return cXTypeLiteralAction_0; }

		//type=[types::JvmType|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[types::JvmType|QualifiedName]
		public CrossReference getTypeJvmTypeCrossReference_1_0() { return cTypeJvmTypeCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTypeJvmTypeQualifiedNameParserRuleCall_1_0_1() { return cTypeJvmTypeQualifiedNameParserRuleCall_1_0_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//"class"
		public Keyword getClassKeyword_3() { return cClassKeyword_3; }
	}

	public class XUnaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XUnaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cXUnaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_0_1_0 = (CrossReference)cFeatureAssignment_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_0_1_0.eContents().get(1);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandXMemberFeatureCallParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cXMemberFeatureCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XUnaryOperation returns xbase::XExpression:
		//
		//	{xbase::XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XMemberFeatureCall |
		//
		//	XMemberFeatureCall;
		public ParserRule getRule() { return rule; }

		//{xbase::XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XMemberFeatureCall | XMemberFeatureCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//{xbase::XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XMemberFeatureCall
		public Group getGroup_0() { return cGroup_0; }

		//{xbase::XUnaryOperation}
		public Action getXUnaryOperationAction_0_0() { return cXUnaryOperationAction_0_0; }

		//feature=[types::JvmIdentifiableElement|OpUnary]
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//[types::JvmIdentifiableElement|OpUnary]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_0_1_0; }

		//OpUnary
		public RuleCall getFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1() { return cFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1; }

		//operand=XMemberFeatureCall
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }

		//XMemberFeatureCall
		public RuleCall getOperandXMemberFeatureCallParserRuleCall_0_2_0() { return cOperandXMemberFeatureCallParserRuleCall_0_2_0; }

		//XMemberFeatureCall
		public RuleCall getXMemberFeatureCallParserRuleCall_1() { return cXMemberFeatureCallParserRuleCall_1; }
	}

	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXConstructorCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXFeatureCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXIfExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXForLoopExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXWhileExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXDoWhileExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXThrowExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cXReturnExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cXTryCatchFinallyExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cXParenthesizedExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//XPrimaryExpression returns xbase::XExpression:
		//
		//	XConstructorCall | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression | XWhileExpression |
		//
		//	XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | //	=>XCastedExpression |
		//
		//
		//	XParenthesizedExpression;
		public ParserRule getRule() { return rule; }

		//XConstructorCall | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression | XWhileExpression | XDoWhileExpression
		//
		//| XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | //	=>XCastedExpression |
		//
		//
		//XParenthesizedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//XConstructorCall
		public RuleCall getXConstructorCallParserRuleCall_0() { return cXConstructorCallParserRuleCall_0; }

		//XFeatureCall
		public RuleCall getXFeatureCallParserRuleCall_1() { return cXFeatureCallParserRuleCall_1; }

		//XLiteral
		public RuleCall getXLiteralParserRuleCall_2() { return cXLiteralParserRuleCall_2; }

		//XIfExpression
		public RuleCall getXIfExpressionParserRuleCall_3() { return cXIfExpressionParserRuleCall_3; }

		//XForLoopExpression
		public RuleCall getXForLoopExpressionParserRuleCall_4() { return cXForLoopExpressionParserRuleCall_4; }

		//XWhileExpression
		public RuleCall getXWhileExpressionParserRuleCall_5() { return cXWhileExpressionParserRuleCall_5; }

		//XDoWhileExpression
		public RuleCall getXDoWhileExpressionParserRuleCall_6() { return cXDoWhileExpressionParserRuleCall_6; }

		//XThrowExpression
		public RuleCall getXThrowExpressionParserRuleCall_7() { return cXThrowExpressionParserRuleCall_7; }

		//XReturnExpression
		public RuleCall getXReturnExpressionParserRuleCall_8() { return cXReturnExpressionParserRuleCall_8; }

		//XTryCatchFinallyExpression
		public RuleCall getXTryCatchFinallyExpressionParserRuleCall_9() { return cXTryCatchFinallyExpressionParserRuleCall_9; }

		////	=>XCastedExpression |
		// XParenthesizedExpression
		public RuleCall getXParenthesizedExpressionParserRuleCall_10() { return cXParenthesizedExpressionParserRuleCall_10; }
	}

	public class XMemberFeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMemberFeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cXAssignmentAssignableAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Assignment cFeatureAssignment_1_0_0_0_2 = (Assignment)cGroup_1_0_0_0.eContents().get(2);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_0_2_0 = (CrossReference)cFeatureAssignment_1_0_0_0_2.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementValidIDParserRuleCall_1_0_0_0_2_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_0_2_0.eContents().get(1);
		private final RuleCall cOpSingleAssignParserRuleCall_1_0_0_0_3 = (RuleCall)cGroup_1_0_0_0.eContents().get(3);
		private final Assignment cValueAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cValueXAssignmentParserRuleCall_1_0_1_0 = (RuleCall)cValueAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_0_0_1 = (Keyword)cGroup_1_1_0_0.eContents().get(1);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_1_0 = (RuleCall)cTypeArgumentsAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_1_2 = (Group)cGroup_1_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_1_2_0 = (Keyword)cGroup_1_1_1_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_1_1_2_1 = (Assignment)cGroup_1_1_1_2.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_2_1_0 = (RuleCall)cTypeArgumentsAssignment_1_1_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1_1_3 = (Keyword)cGroup_1_1_1.eContents().get(3);
		private final Assignment cFeatureAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_1_2_0 = (CrossReference)cFeatureAssignment_1_1_2.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementValidIDParserRuleCall_1_1_2_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_1_2_0.eContents().get(1);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Assignment cExplicitOperationCallAssignment_1_1_3_0 = (Assignment)cGroup_1_1_3.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_1_1_3_0_0 = (Keyword)cExplicitOperationCallAssignment_1_1_3_0.eContents().get(0);
		private final Group cGroup_1_1_3_1 = (Group)cGroup_1_1_3.eContents().get(1);
		private final Assignment cMemberCallArgumentsAssignment_1_1_3_1_0 = (Assignment)cGroup_1_1_3_1.eContents().get(0);
		private final RuleCall cMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_0_0 = (RuleCall)cMemberCallArgumentsAssignment_1_1_3_1_0.eContents().get(0);
		private final Group cGroup_1_1_3_1_1 = (Group)cGroup_1_1_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_3_1_1_0 = (Keyword)cGroup_1_1_3_1_1.eContents().get(0);
		private final Assignment cMemberCallArgumentsAssignment_1_1_3_1_1_1 = (Assignment)cGroup_1_1_3_1_1.eContents().get(1);
		private final RuleCall cMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_1_0 = (RuleCall)cMemberCallArgumentsAssignment_1_1_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_3_2 = (Keyword)cGroup_1_1_3.eContents().get(2);
		
		////XCastedExpression returns xbase::XExpression :
		// //	{xbase::XCastedExpression} 
		//
		//
		////	'(' type=JvmTypeReference ')' target=XMemberFeatureCall
		// //;
		// XMemberFeatureCall returns xbase::XExpression:
		//
		//	XPrimaryExpression (=> ({xbase::XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
		//
		//	OpSingleAssign) value=XAssignment | => ({xbase::XMemberFeatureCall.memberCallTarget=current} ".") ("<"
		//
		//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		//
		//	feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XExpression (","
		//
		//	memberCallArguments+=XExpression)*)? ")")?)*;
		public ParserRule getRule() { return rule; }

		//XPrimaryExpression (=> ({xbase::XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
		//
		//OpSingleAssign) value=XAssignment | => ({xbase::XMemberFeatureCall.memberCallTarget=current} ".") ("<"
		//
		//typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		//
		//feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XExpression (","
		//
		//memberCallArguments+=XExpression)*)? ")")?)*
		public Group getGroup() { return cGroup; }

		//XPrimaryExpression
		public RuleCall getXPrimaryExpressionParserRuleCall_0() { return cXPrimaryExpressionParserRuleCall_0; }

		//(=> ({xbase::XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID] OpSingleAssign)
		//
		//value=XAssignment | => ({xbase::XMemberFeatureCall.memberCallTarget=current} ".") ("<"
		//
		//typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		//
		//feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XExpression (","
		//
		//memberCallArguments+=XExpression)*)? ")")?)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> ({xbase::XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID] OpSingleAssign)
		//
		//value=XAssignment
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> ({xbase::XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID] OpSingleAssign)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{xbase::XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID] OpSingleAssign
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{xbase::XAssignment.assignable=current}
		public Action getXAssignmentAssignableAction_1_0_0_0_0() { return cXAssignmentAssignableAction_1_0_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_0_0_0_1() { return cFullStopKeyword_1_0_0_0_1; }

		//feature=[types::JvmIdentifiableElement|ValidID]
		public Assignment getFeatureAssignment_1_0_0_0_2() { return cFeatureAssignment_1_0_0_0_2; }

		//[types::JvmIdentifiableElement|ValidID]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_0_2_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_0_2_0; }

		//ValidID
		public RuleCall getFeatureJvmIdentifiableElementValidIDParserRuleCall_1_0_0_0_2_0_1() { return cFeatureJvmIdentifiableElementValidIDParserRuleCall_1_0_0_0_2_0_1; }

		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_1_0_0_0_3() { return cOpSingleAssignParserRuleCall_1_0_0_0_3; }

		//value=XAssignment
		public Assignment getValueAssignment_1_0_1() { return cValueAssignment_1_0_1; }

		//XAssignment
		public RuleCall getValueXAssignmentParserRuleCall_1_0_1_0() { return cValueXAssignmentParserRuleCall_1_0_1_0; }

		//=> ({xbase::XMemberFeatureCall.memberCallTarget=current} ".") ("<" typeArguments+=JvmArgumentTypeReference (","
		//
		//typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|ValidID] (=>
		//
		//explicitOperationCall?="(" (memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({xbase::XMemberFeatureCall.memberCallTarget=current} ".")
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{xbase::XMemberFeatureCall.memberCallTarget=current} "."
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{xbase::XMemberFeatureCall.memberCallTarget=current}
		public Action getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() { return cXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1_0_0_1() { return cFullStopKeyword_1_1_0_0_1; }

		//("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_1_1_0() { return cLessThanSignKeyword_1_1_1_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_1_1_1_1() { return cTypeArgumentsAssignment_1_1_1_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_1_0; }

		//("," typeArguments+=JvmArgumentTypeReference)*
		public Group getGroup_1_1_1_2() { return cGroup_1_1_1_2; }

		//","
		public Keyword getCommaKeyword_1_1_1_2_0() { return cCommaKeyword_1_1_1_2_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_1_1_1_2_1() { return cTypeArgumentsAssignment_1_1_1_2_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_2_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_1_1_3() { return cGreaterThanSignKeyword_1_1_1_3; }

		//feature=[types::JvmIdentifiableElement|ValidID]
		public Assignment getFeatureAssignment_1_1_2() { return cFeatureAssignment_1_1_2; }

		//[types::JvmIdentifiableElement|ValidID]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_1_2_0() { return cFeatureJvmIdentifiableElementCrossReference_1_1_2_0; }

		//ValidID
		public RuleCall getFeatureJvmIdentifiableElementValidIDParserRuleCall_1_1_2_0_1() { return cFeatureJvmIdentifiableElementValidIDParserRuleCall_1_1_2_0_1; }

		//(=> explicitOperationCall?="(" (memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }

		//=> explicitOperationCall?="("
		public Assignment getExplicitOperationCallAssignment_1_1_3_0() { return cExplicitOperationCallAssignment_1_1_3_0; }

		//"("
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_1_1_3_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_1_1_3_0_0; }

		//(memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)?
		public Group getGroup_1_1_3_1() { return cGroup_1_1_3_1; }

		//memberCallArguments+=XExpression
		public Assignment getMemberCallArgumentsAssignment_1_1_3_1_0() { return cMemberCallArgumentsAssignment_1_1_3_1_0; }

		//XExpression
		public RuleCall getMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_0_0() { return cMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_0_0; }

		//("," memberCallArguments+=XExpression)*
		public Group getGroup_1_1_3_1_1() { return cGroup_1_1_3_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_3_1_1_0() { return cCommaKeyword_1_1_3_1_1_0; }

		//memberCallArguments+=XExpression
		public Assignment getMemberCallArgumentsAssignment_1_1_3_1_1_1() { return cMemberCallArgumentsAssignment_1_1_3_1_1_1; }

		//XExpression
		public RuleCall getMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_1_0() { return cMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_3_2() { return cRightParenthesisKeyword_1_1_3_2; }
	}

	public class XFeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XFeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXFeatureCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclaringTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDeclaringTypeJvmDeclaredTypeCrossReference_1_0 = (CrossReference)cDeclaringTypeAssignment_1.eContents().get(0);
		private final RuleCall cDeclaringTypeJvmDeclaredTypeStaticQualifierParserRuleCall_1_0_1 = (RuleCall)cDeclaringTypeJvmDeclaredTypeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cTypeArgumentsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_2_2_1_0 = (RuleCall)cTypeArgumentsAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cFeatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_3_0 = (CrossReference)cFeatureAssignment_3.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_3_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cExplicitOperationCallAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_4_0_0 = (Keyword)cExplicitOperationCallAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cFeatureCallArgumentsAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cFeatureCallArgumentsXExpressionParserRuleCall_4_1_0_0 = (RuleCall)cFeatureCallArgumentsAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cFeatureCallArgumentsAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cFeatureCallArgumentsXExpressionParserRuleCall_4_1_1_1_0 = (RuleCall)cFeatureCallArgumentsAssignment_4_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//XFeatureCall returns xbase::XExpression:
		//
		//	{xbase::XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<"
		//
		//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		//
		//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XExpression
		//
		//	("," featureCallArguments+=XExpression)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//{xbase::XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<"
		//
		//typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		//
		//feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XExpression
		//
		//("," featureCallArguments+=XExpression)*)? ")")?
		public Group getGroup() { return cGroup; }

		//{xbase::XFeatureCall}
		public Action getXFeatureCallAction_0() { return cXFeatureCallAction_0; }

		//declaringType=[types::JvmDeclaredType|StaticQualifier]?
		public Assignment getDeclaringTypeAssignment_1() { return cDeclaringTypeAssignment_1; }

		//[types::JvmDeclaredType|StaticQualifier]
		public CrossReference getDeclaringTypeJvmDeclaredTypeCrossReference_1_0() { return cDeclaringTypeJvmDeclaredTypeCrossReference_1_0; }

		//StaticQualifier
		public RuleCall getDeclaringTypeJvmDeclaredTypeStaticQualifierParserRuleCall_1_0_1() { return cDeclaringTypeJvmDeclaredTypeStaticQualifierParserRuleCall_1_0_1; }

		//("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_2_1() { return cTypeArgumentsAssignment_2_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_2_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_2_1_0; }

		//("," typeArguments+=JvmArgumentTypeReference)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_2_2_1() { return cTypeArgumentsAssignment_2_2_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_2_2_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//feature=[types::JvmIdentifiableElement|IdOrSuper]
		public Assignment getFeatureAssignment_3() { return cFeatureAssignment_3; }

		//[types::JvmIdentifiableElement|IdOrSuper]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_3_0() { return cFeatureJvmIdentifiableElementCrossReference_3_0; }

		//IdOrSuper
		public RuleCall getFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_3_0_1() { return cFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_3_0_1; }

		//(=> explicitOperationCall?="(" (featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")?
		public Group getGroup_4() { return cGroup_4; }

		//=> explicitOperationCall?="("
		public Assignment getExplicitOperationCallAssignment_4_0() { return cExplicitOperationCallAssignment_4_0; }

		//"("
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_4_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_4_0_0; }

		//(featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//featureCallArguments+=XExpression
		public Assignment getFeatureCallArgumentsAssignment_4_1_0() { return cFeatureCallArgumentsAssignment_4_1_0; }

		//XExpression
		public RuleCall getFeatureCallArgumentsXExpressionParserRuleCall_4_1_0_0() { return cFeatureCallArgumentsXExpressionParserRuleCall_4_1_0_0; }

		//("," featureCallArguments+=XExpression)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//","
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }

		//featureCallArguments+=XExpression
		public Assignment getFeatureCallArgumentsAssignment_4_1_1_1() { return cFeatureCallArgumentsAssignment_4_1_1_1; }

		//XExpression
		public RuleCall getFeatureCallArgumentsXExpressionParserRuleCall_4_1_1_1_0() { return cFeatureCallArgumentsXExpressionParserRuleCall_4_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
	}

	public class XConstructorCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XConstructorCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXConstructorCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstructorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cConstructorJvmConstructorCrossReference_2_0 = (CrossReference)cConstructorAssignment_2.eContents().get(0);
		private final RuleCall cConstructorJvmConstructorQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cConstructorJvmConstructorCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cTypeArgumentsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_2_1_0 = (RuleCall)cTypeArgumentsAssignment_3_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Group cGroup_4_0_1 = (Group)cGroup_4_0.eContents().get(1);
		private final Assignment cArgumentsAssignment_4_0_1_0 = (Assignment)cGroup_4_0_1.eContents().get(0);
		private final RuleCall cArgumentsXExpressionParserRuleCall_4_0_1_0_0 = (RuleCall)cArgumentsAssignment_4_0_1_0.eContents().get(0);
		private final Group cGroup_4_0_1_1 = (Group)cGroup_4_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_0_1_1_0 = (Keyword)cGroup_4_0_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_4_0_1_1_1 = (Assignment)cGroup_4_0_1_1.eContents().get(1);
		private final RuleCall cArgumentsXExpressionParserRuleCall_4_0_1_1_1_0 = (RuleCall)cArgumentsAssignment_4_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Assignment cIsArrayAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final Keyword cIsArrayLeftSquareBracketKeyword_4_1_0_0 = (Keyword)cIsArrayAssignment_4_1_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		
		////
		// // String[] a = new String[3];
		// // String[] b = new String[]{"", "", ""};
		// XConstructorCall returns
		//
		//xbase::XConstructorCall:
		//
		//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
		//
		//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
		//
		//	(arguments+=XExpression ("," arguments+=XExpression)*)? ")" | => isArray?="[" "]");
		public ParserRule getRule() { return rule; }

		//{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<" typeArguments+=JvmArgumentTypeReference
		//
		//("," typeArguments+=JvmArgumentTypeReference)* ">")? ("(" (arguments+=XExpression ("," arguments+=XExpression)*)? ")"
		//
		//| => isArray?="[" "]")
		public Group getGroup() { return cGroup; }

		//{XConstructorCall}
		public Action getXConstructorCallAction_0() { return cXConstructorCallAction_0; }

		//"new"
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }

		//constructor=[types::JvmConstructor|QualifiedName]
		public Assignment getConstructorAssignment_2() { return cConstructorAssignment_2; }

		//[types::JvmConstructor|QualifiedName]
		public CrossReference getConstructorJvmConstructorCrossReference_2_0() { return cConstructorJvmConstructorCrossReference_2_0; }

		//QualifiedName
		public RuleCall getConstructorJvmConstructorQualifiedNameParserRuleCall_2_0_1() { return cConstructorJvmConstructorQualifiedNameParserRuleCall_2_0_1; }

		//(=> "<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		public Group getGroup_3() { return cGroup_3; }

		//=> "<"
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_3_1() { return cTypeArgumentsAssignment_3_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_1_0; }

		//("," typeArguments+=JvmArgumentTypeReference)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_3_2_1() { return cTypeArgumentsAssignment_3_2_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_2_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_3() { return cGreaterThanSignKeyword_3_3; }

		//=> "(" (arguments+=XExpression ("," arguments+=XExpression)*)? ")" | => isArray?="[" "]"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//=> "(" (arguments+=XExpression ("," arguments+=XExpression)*)? ")"
		public Group getGroup_4_0() { return cGroup_4_0; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_4_0_0() { return cLeftParenthesisKeyword_4_0_0; }

		//(arguments+=XExpression ("," arguments+=XExpression)*)?
		public Group getGroup_4_0_1() { return cGroup_4_0_1; }

		//arguments+=XExpression
		public Assignment getArgumentsAssignment_4_0_1_0() { return cArgumentsAssignment_4_0_1_0; }

		//XExpression
		public RuleCall getArgumentsXExpressionParserRuleCall_4_0_1_0_0() { return cArgumentsXExpressionParserRuleCall_4_0_1_0_0; }

		//("," arguments+=XExpression)*
		public Group getGroup_4_0_1_1() { return cGroup_4_0_1_1; }

		//","
		public Keyword getCommaKeyword_4_0_1_1_0() { return cCommaKeyword_4_0_1_1_0; }

		//arguments+=XExpression
		public Assignment getArgumentsAssignment_4_0_1_1_1() { return cArgumentsAssignment_4_0_1_1_1; }

		//XExpression
		public RuleCall getArgumentsXExpressionParserRuleCall_4_0_1_1_1_0() { return cArgumentsXExpressionParserRuleCall_4_0_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_0_2() { return cRightParenthesisKeyword_4_0_2; }

		//=> isArray?="[" "]"
		public Group getGroup_4_1() { return cGroup_4_1; }

		//=> isArray?="["
		public Assignment getIsArrayAssignment_4_1_0() { return cIsArrayAssignment_4_1_0; }

		//"["
		public Keyword getIsArrayLeftSquareBracketKeyword_4_1_0_0() { return cIsArrayLeftSquareBracketKeyword_4_1_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_1_1() { return cRightSquareBracketKeyword_4_1_1; }
	}
	
	
	private ModelElements pModel;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private BooleanTypeElements pBooleanType;
	private LogicEventTypeElements pLogicEventType;
	private ModuleElementElements pModuleElement;
	private ImportElementElements pImportElement;
	private TranslationElementElements pTranslationElement;
	private LanguageAttributeElements pLanguageAttribute;
	private LogicElementElements pLogicElement;
	private CodeElementElements pCodeElement;
	private LookupElementElements pLookupElement;
	private TemplateElementElements pTemplateElement;
	private FormElementElements pFormElement;
	private FormFieldElementElements pFormFieldElement;
	private FormFieldPropertiesElements pFormFieldProperties;
	private CompositeFieldElementElements pCompositeFieldElement;
	private SequenceBoxElementElements pSequenceBoxElement;
	private GroupBoxElementElements pGroupBoxElement;
	private ValueFieldElementElements pValueFieldElement;
	private ValueFieldPropertiesElements pValueFieldProperties;
	private StringElementElements pStringElement;
	private DoubleElementElements pDoubleElement;
	private LongElementElements pLongElement;
	private DateElementElements pDateElement;
	private SmartfieldElementElements pSmartfieldElement;
	private CustomFieldElementElements pCustomFieldElement;
	private XBlockExpressionElements pXBlockExpression;
	private XExpressionInsideBlockElements pXExpressionInsideBlock;
	private XVariableDeclarationElements pXVariableDeclaration;
	private XLiteralElements pXLiteral;
	private XTypeLiteralElements pXTypeLiteral;
	private XUnaryOperationElements pXUnaryOperation;
	private XPrimaryExpressionElements pXPrimaryExpression;
	private XMemberFeatureCallElements pXMemberFeatureCall;
	private XFeatureCallElements pXFeatureCall;
	private XConstructorCallElements pXConstructorCall;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public SamlGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.scout.saml.Saml".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//Model:
	//
	//	module=ModuleElement imports+=ImportElement* (translations+=TranslationElement | codes+=CodeElement |
	//
	//	lookups+=LookupElement | templates+=TemplateElement | forms+=FormElement)*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//// TYPES
	// QualifiedNameWithWildCard:
	//
	//	QualifiedName ("." "*")?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	////TODO: code completion
	// BooleanType:
	//
	//	"true" | "false";
	public BooleanTypeElements getBooleanTypeAccess() {
		return (pBooleanType != null) ? pBooleanType : (pBooleanType = new BooleanTypeElements());
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}

	////TODO: code completion depending on element we are on
	// LogicEventType:
	//
	//	"all" | "modify_load" | "modify_store" | "new_load" | "new_store" | "changed" | "click" | "master_changed" | "init";
	public LogicEventTypeElements getLogicEventTypeAccess() {
		return (pLogicEventType != null) ? pLogicEventType : (pLogicEventType = new LogicEventTypeElements());
	}
	
	public ParserRule getLogicEventTypeRule() {
		return getLogicEventTypeAccess().getRule();
	}

	//ModuleElement:
	//
	//	"module" name=QualifiedName;
	public ModuleElementElements getModuleElementAccess() {
		return (pModuleElement != null) ? pModuleElement : (pModuleElement = new ModuleElementElements());
	}
	
	public ParserRule getModuleElementRule() {
		return getModuleElementAccess().getRule();
	}

	//ImportElement:
	//
	//	"import" importedNamespace=QualifiedNameWithWildCard;
	public ImportElementElements getImportElementAccess() {
		return (pImportElement != null) ? pImportElement : (pImportElement = new ImportElementElements());
	}
	
	public ParserRule getImportElementRule() {
		return getImportElementAccess().getRule();
	}

	//TranslationElement:
	//
	//	"translation" name=QualifiedName translations+=LanguageAttribute+;
	public TranslationElementElements getTranslationElementAccess() {
		return (pTranslationElement != null) ? pTranslationElement : (pTranslationElement = new TranslationElementElements());
	}
	
	public ParserRule getTranslationElementRule() {
		return getTranslationElementAccess().getRule();
	}

	//LanguageAttribute:
	//
	//	lang=ID "=" text=STRING;
	public LanguageAttributeElements getLanguageAttributeAccess() {
		return (pLanguageAttribute != null) ? pLanguageAttribute : (pLanguageAttribute = new LanguageAttributeElements());
	}
	
	public ParserRule getLanguageAttributeRule() {
		return getLanguageAttributeAccess().getRule();
	}

	////TODO: validation of properties, scope of exec=
	// LogicElement:
	//
	//	{LogicElement} "logic" name=ID? (("event" "=" event=LogicEventType)? & ("runat" "=" runat=("client" | "server"))? &
	//
	//	("exec" "=" exec=[LogicElement])?) source=XBlockExpression?;
	public LogicElementElements getLogicElementAccess() {
		return (pLogicElement != null) ? pLogicElement : (pLogicElement = new LogicElementElements());
	}
	
	public ParserRule getLogicElementRule() {
		return getLogicElementAccess().getRule();
	}

	//CodeElement:
	//
	//	"code" name=ID "id" "=" id=INT;
	public CodeElementElements getCodeElementAccess() {
		return (pCodeElement != null) ? pCodeElement : (pCodeElement = new CodeElementElements());
	}
	
	public ParserRule getCodeElementRule() {
		return getCodeElementAccess().getRule();
	}

	//LookupElement:
	//
	//	"lookup" name=ID "{" logic+=LogicElement* "}";
	public LookupElementElements getLookupElementAccess() {
		return (pLookupElement != null) ? pLookupElement : (pLookupElement = new LookupElementElements());
	}
	
	public ParserRule getLookupElementRule() {
		return getLookupElementAccess().getRule();
	}

	//TemplateElement:
	//
	//	"template" name=ID "definition" "=" definition=JvmTypeReference;
	public TemplateElementElements getTemplateElementAccess() {
		return (pTemplateElement != null) ? pTemplateElement : (pTemplateElement = new TemplateElementElements());
	}
	
	public ParserRule getTemplateElementRule() {
		return getTemplateElementAccess().getRule();
	}

	//FormElement:
	//
	//	"form" name=ID (("modal" "=" modal=BooleanType)? & ("columns" "=" columns=INT)? & ("text" "="
	//
	//	text=[TranslationElement])?) ("{" (logic+=LogicElement | fields+=FormFieldElement)* "}")?;
	public FormElementElements getFormElementAccess() {
		return (pFormElement != null) ? pFormElement : (pFormElement = new FormElementElements());
	}
	
	public ParserRule getFormElementRule() {
		return getFormElementAccess().getRule();
	}

	//// UI FIELDS
	// FormFieldElement:
	//
	//	CompositeFieldElement | ValueFieldElement;
	public FormFieldElementElements getFormFieldElementAccess() {
		return (pFormFieldElement != null) ? pFormFieldElement : (pFormFieldElement = new FormFieldElementElements());
	}
	
	public ParserRule getFormFieldElementRule() {
		return getFormFieldElementAccess().getRule();
	}

	//FormFieldProperties:
	//
	//	{FormFieldProperties} (("text" "=" text=[TranslationElement])? & ("enabled" "=" enabled=BooleanType)? & ("visible"
	//
	//	"=" visible=BooleanType)? & ("master" "=" master=[ValueFieldElement])?);
	public FormFieldPropertiesElements getFormFieldPropertiesAccess() {
		return (pFormFieldProperties != null) ? pFormFieldProperties : (pFormFieldProperties = new FormFieldPropertiesElements());
	}
	
	public ParserRule getFormFieldPropertiesRule() {
		return getFormFieldPropertiesAccess().getRule();
	}

	//// COMPOSITES
	// CompositeFieldElement:
	//
	//	SequenceBoxElement | GroupBoxElement;
	public CompositeFieldElementElements getCompositeFieldElementAccess() {
		return (pCompositeFieldElement != null) ? pCompositeFieldElement : (pCompositeFieldElement = new CompositeFieldElementElements());
	}
	
	public ParserRule getCompositeFieldElementRule() {
		return getCompositeFieldElementAccess().getRule();
	}

	//SequenceBoxElement:
	//
	//	"sequence_box" name=ID formFieldProperties=FormFieldProperties ("{" (logic+=LogicElement | fields+=FormFieldElement)*
	//
	//	"}")?;
	public SequenceBoxElementElements getSequenceBoxElementAccess() {
		return (pSequenceBoxElement != null) ? pSequenceBoxElement : (pSequenceBoxElement = new SequenceBoxElementElements());
	}
	
	public ParserRule getSequenceBoxElementRule() {
		return getSequenceBoxElementAccess().getRule();
	}

	//GroupBoxElement:
	//
	//	"group_box" name=ID formFieldProperties=FormFieldProperties ("{" (logic+=LogicElement | fields+=FormFieldElement)*
	//
	//	"}")?;
	public GroupBoxElementElements getGroupBoxElementAccess() {
		return (pGroupBoxElement != null) ? pGroupBoxElement : (pGroupBoxElement = new GroupBoxElementElements());
	}
	
	public ParserRule getGroupBoxElementRule() {
		return getGroupBoxElementAccess().getRule();
	}

	//// VALUE FIELDS
	// ValueFieldElement:
	//
	//	StringElement | DoubleElement | LongElement | DateElement | SmartfieldElement | CustomFieldElement;
	public ValueFieldElementElements getValueFieldElementAccess() {
		return (pValueFieldElement != null) ? pValueFieldElement : (pValueFieldElement = new ValueFieldElementElements());
	}
	
	public ParserRule getValueFieldElementRule() {
		return getValueFieldElementAccess().getRule();
	}

	//ValueFieldProperties:
	//
	//	{ValueFieldProperties} (formFieldProperties=FormFieldProperties & ("mandatory" "=" mandatory=BooleanType)?);
	public ValueFieldPropertiesElements getValueFieldPropertiesAccess() {
		return (pValueFieldProperties != null) ? pValueFieldProperties : (pValueFieldProperties = new ValueFieldPropertiesElements());
	}
	
	public ParserRule getValueFieldPropertiesRule() {
		return getValueFieldPropertiesAccess().getRule();
	}

	//StringElement:
	//
	//	"string" name=ID (valueFieldProperties=ValueFieldProperties & ("maxlen" "=" maxlen=INT)?) ("{" logic+=LogicElement*
	//
	//	"}")?;
	public StringElementElements getStringElementAccess() {
		return (pStringElement != null) ? pStringElement : (pStringElement = new StringElementElements());
	}
	
	public ParserRule getStringElementRule() {
		return getStringElementAccess().getRule();
	}

	//DoubleElement:
	//
	//	"double" name=ID valueFieldProperties=ValueFieldProperties ("{" logic+=LogicElement* "}")?;
	public DoubleElementElements getDoubleElementAccess() {
		return (pDoubleElement != null) ? pDoubleElement : (pDoubleElement = new DoubleElementElements());
	}
	
	public ParserRule getDoubleElementRule() {
		return getDoubleElementAccess().getRule();
	}

	//LongElement:
	//
	//	"long" name=ID valueFieldProperties=ValueFieldProperties ("{" logic+=LogicElement* "}")?;
	public LongElementElements getLongElementAccess() {
		return (pLongElement != null) ? pLongElement : (pLongElement = new LongElementElements());
	}
	
	public ParserRule getLongElementRule() {
		return getLongElementAccess().getRule();
	}

	//DateElement:
	//
	//	"date" name=ID valueFieldProperties=ValueFieldProperties ("{" logic+=LogicElement* "}")?;
	public DateElementElements getDateElementAccess() {
		return (pDateElement != null) ? pDateElement : (pDateElement = new DateElementElements());
	}
	
	public ParserRule getDateElementRule() {
		return getDateElementAccess().getRule();
	}

	//SmartfieldElement:
	//
	//	"smartfield" name=ID (valueFieldProperties=ValueFieldProperties? & ("code" "=" code=[CodeElement])? & ("value_type"
	//
	//	"=" valueType=JvmTypeReference)? & ("lookup" "=" lookup=[LookupElement])?) ("{" logic+=LogicElement* "}")?;
	public SmartfieldElementElements getSmartfieldElementAccess() {
		return (pSmartfieldElement != null) ? pSmartfieldElement : (pSmartfieldElement = new SmartfieldElementElements());
	}
	
	public ParserRule getSmartfieldElementRule() {
		return getSmartfieldElementAccess().getRule();
	}

	//// CUSTOM FIELDS
	// CustomFieldElement:
	//
	//	"custom_field" name=ID "template" "=" template=[TemplateElement] formFieldProperties=FormFieldProperties ("{"
	//
	//	(logic+=LogicElement | fields+=FormFieldElement)* "}")?;
	public CustomFieldElementElements getCustomFieldElementAccess() {
		return (pCustomFieldElement != null) ? pCustomFieldElement : (pCustomFieldElement = new CustomFieldElementElements());
	}
	
	public ParserRule getCustomFieldElementRule() {
		return getCustomFieldElementAccess().getRule();
	}

	//XBlockExpression returns xbase::XBlockExpression:
	//
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";")* "}";
	public XBlockExpressionElements getXBlockExpressionAccess() {
		return (pXBlockExpression != null) ? pXBlockExpression : (pXBlockExpression = new XBlockExpressionElements());
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns xbase::XExpression:
	//
	//	XVariableDeclaration | XExpression;
	public XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return (pXExpressionInsideBlock != null) ? pXExpressionInsideBlock : (pXExpressionInsideBlock = new XExpressionInsideBlockElements());
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns xbase::XVariableDeclaration:
	//
	//	{XVariableDeclaration} type=JvmTypeReference name=ValidID ("=" right=XExpression)?;
	public XVariableDeclarationElements getXVariableDeclarationAccess() {
		return (pXVariableDeclaration != null) ? pXVariableDeclaration : (pXVariableDeclaration = new XVariableDeclarationElements());
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//XLiteral returns xbase::XExpression:
	//
	//	XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XLiteralElements getXLiteralAccess() {
		return (pXLiteral != null) ? pXLiteral : (pXLiteral = new XLiteralElements());
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	////
	// // TODO: this makes code completion freeze for feauture access
	// XTypeLiteral returns xbase::XExpression:
	//
	//	{xbase::XTypeLiteral} type=[types::JvmType|QualifiedName] "." "class";
	public XTypeLiteralElements getXTypeLiteralAccess() {
		return (pXTypeLiteral != null) ? pXTypeLiteral : (pXTypeLiteral = new XTypeLiteralElements());
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XUnaryOperation returns xbase::XExpression:
	//
	//	{xbase::XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XMemberFeatureCall |
	//
	//	XMemberFeatureCall;
	public XUnaryOperationElements getXUnaryOperationAccess() {
		return (pXUnaryOperation != null) ? pXUnaryOperation : (pXUnaryOperation = new XUnaryOperationElements());
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//XPrimaryExpression returns xbase::XExpression:
	//
	//	XConstructorCall | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression | XWhileExpression |
	//
	//	XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | //	=>XCastedExpression |
	//
	//
	//	XParenthesizedExpression;
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return (pXPrimaryExpression != null) ? pXPrimaryExpression : (pXPrimaryExpression = new XPrimaryExpressionElements());
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	////XCastedExpression returns xbase::XExpression :
	// //	{xbase::XCastedExpression} 
	//
	//
	////	'(' type=JvmTypeReference ')' target=XMemberFeatureCall
	// //;
	// XMemberFeatureCall returns xbase::XExpression:
	//
	//	XPrimaryExpression (=> ({xbase::XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
	//
	//	OpSingleAssign) value=XAssignment | => ({xbase::XMemberFeatureCall.memberCallTarget=current} ".") ("<"
	//
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//
	//	feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XExpression (","
	//
	//	memberCallArguments+=XExpression)*)? ")")?)*;
	public XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return (pXMemberFeatureCall != null) ? pXMemberFeatureCall : (pXMemberFeatureCall = new XMemberFeatureCallElements());
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XFeatureCall returns xbase::XExpression:
	//
	//	{xbase::XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<"
	//
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XExpression
	//
	//	("," featureCallArguments+=XExpression)*)? ")")?;
	public XFeatureCallElements getXFeatureCallAccess() {
		return (pXFeatureCall != null) ? pXFeatureCall : (pXFeatureCall = new XFeatureCallElements());
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	////
	// // String[] a = new String[3];
	// // String[] b = new String[]{"", "", ""};
	// XConstructorCall returns
	//
	//xbase::XConstructorCall:
	//
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//
	//	(arguments+=XExpression ("," arguments+=XExpression)*)? ")" | => isArray?="[" "]");
	public XConstructorCallElements getXConstructorCallAccess() {
		return (pXConstructorCall != null) ? pXConstructorCall : (pXConstructorCall = new XConstructorCallElements());
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XExpression:
	//
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * / feature=[types::JvmIdentifiableElement|ValidID]
	//
	//	OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//
	//	feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//
	//	"+=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//
	//	"->" | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//OpUnary:
	//
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XClosure returns XExpression:
	//
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//IdOrSuper:
	//
	//	ValidID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//
	//
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//
	//
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	// StaticQualifier:
	//
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//terminal HEX:
	//
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} "[" "]")* | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//ValidID:
	//
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
